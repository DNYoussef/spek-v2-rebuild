/**
 * TypeScript Error Fixing Workflow
 *
 * TRIGGER: TypeScript compilation errors detected
 *
 * This workflow guides systematic TypeScript error resolution,
 * from initial triage through verification.
 *
 * VERSION: 1.0
 * CREATED: 2025-10-11
 * PRIORITY: P1 (blocking production deployment)
 */

digraph typescript_error_fixing {
  rankdir=TB;
  node [fontname="Arial", fontsize=10];
  edge [fontname="Arial", fontsize=9];

  // ========== ENTRY POINT ==========
  start [shape=ellipse, style=filled, fillcolor=lightblue, label="TypeScript\nErrors Detected"];

  // ========== PHASE 1: TRIAGE ==========
  run_tsc [shape=box, label="Run tsc --noEmit\n(collect all errors)"];
  count_errors [shape=box, label="Count total errors\nby file and category"];
  categorize [shape=diamond, label="<5 errors?"];

  // Error categories
  quick_fix [shape=box, style=filled, fillcolor=lightgreen, label="Quick Fix Strategy\n(< 1 hour)"];
  systematic_fix [shape=box, style=filled, fillcolor=yellow, label="Systematic Fix Strategy\n(1-4 hours)"];
  major_refactor [shape=box, style=filled, fillcolor=orange, label="Major Refactor Strategy\n(> 4 hours)"];

  // ========== PHASE 2: CATEGORIZE ERRORS ==========
  identify_patterns [shape=box, label="Identify error patterns:\n- API mismatches\n- Deprecated APIs\n- Type mismatches\n- Missing exports"];

  prioritize [shape=box, label="Prioritize by:\n1. Blocking tests\n2. Production code\n3. Test files\n4. Backend/optional"];

  // ========== PHASE 3: FIX STRATEGIES ==========

  // Quick Fix Path
  quick_1 [shape=box, label="Fix obvious errors:\n- Unused directives\n- Simple type casts\n- Missing imports"];
  quick_2 [shape=box, label="Run tsc --noEmit\nafter each fix"];
  quick_done [shape=diamond, label="Errors\nresolved?"];

  // Systematic Fix Path
  sys_1 [shape=box, label="Group errors by:\n- File\n- Error type\n- Root cause"];
  sys_2 [shape=box, label="Fix one category\nat a time"];
  sys_3 [shape=box, label="Run tsc --noEmit\nafter category"];
  sys_4 [shape=diamond, label="Category\nfixed?"];
  sys_next [shape=box, label="Move to next\ncategory"];
  sys_done [shape=diamond, label="All categories\nfixed?"];

  // Major Refactor Path
  refactor_warn [shape=octagon, style=filled, fillcolor=red, label="⚠️ MAJOR REFACTOR\n> 4 hours estimated"];
  refactor_decision [shape=diamond, label="Can defer\nto later week?"];
  refactor_skip [shape=box, label="Skip tests with\ntest.describe.skip()"];
  refactor_todo [shape=box, label="Add TODO comments\nwith refactor requirements"];
  refactor_proceed [shape=box, label="Break refactor into\n2-hour chunks"];

  // ========== PHASE 4: COMMON ERROR TYPES ==========

  deprecated_api [shape=box, style=filled, fillcolor=lightyellow, label="Deprecated API:\n1. Find modern equivalent\n2. Migrate with proper error handling\n3. Add null checks"];

  api_mismatch [shape=box, style=filled, fillcolor=lightyellow, label="API Mismatch:\n1. Check current implementation\n2. Update import paths\n3. Fix function signatures\n4. Update property access"];

  type_mismatch [shape=box, style=filled, fillcolor=lightyellow, label="Type Mismatch:\n1. Check third-party SDK docs\n2. Use 'as any' if SDK strict\n3. Add explanatory comment\n4. Consider interface extension"];

  corrupted_file [shape=box, style=filled, fillcolor=lightyellow, label="Corrupted File:\n1. Assess extent of corruption\n2. If >50% corrupted, use Write tool\n3. Else use targeted Edit calls\n4. Verify syntax after fix"];

  // ========== PHASE 5: VERIFICATION ==========
  verify_start [shape=box, label="Verification Phase"];
  run_tsc_final [shape=box, label="Run tsc --noEmit\n(full check)"];
  check_scope [shape=diamond, label="Errors\nonly in\nout-of-scope\nfiles?"];

  scope_note [shape=box, label="Document scope:\n'Backend errors remain\n(outside atlantis-ui)'"];

  run_tests [shape=box, label="Run relevant tests:\nnpm test / npx playwright test"];
  tests_pass [shape=diamond, label="Tests\npass?"];

  investigate_test_fail [shape=box, style=filled, fillcolor=orange, label="Investigate test failures:\n1. Check if TypeScript fix\n   broke functionality\n2. Update test expectations\n3. Fix implementation"];

  // ========== PHASE 6: DOCUMENTATION ==========
  document [shape=box, label="Document fixes:\n1. Create summary MD\n2. List files modified\n3. Explain techniques used\n4. Note any workarounds"];

  update_claude_md [shape=box, label="Update CLAUDE.md:\n- Current week status\n- Files modified\n- Errors resolved"];

  commit [shape=box, label="Git commit with message:\n'fix: TypeScript errors\n(6 files, 0 errors)'"];

  // ========== EXIT POINT ==========
  complete [shape=doublecircle, style=filled, fillcolor=lightgreen, label="TypeScript Errors\nFixed ✅"];

  // ========== EDGES ==========

  // Phase 1: Triage
  start -> run_tsc;
  run_tsc -> count_errors;
  count_errors -> categorize;
  categorize -> quick_fix [label="yes\n(<5 errors)"];
  categorize -> systematic_fix [label="5-20 errors"];
  categorize -> major_refactor [label="no\n(>20 errors)"];

  // Phase 2: Categorize
  quick_fix -> identify_patterns;
  systematic_fix -> identify_patterns;
  major_refactor -> refactor_warn;

  identify_patterns -> prioritize;
  prioritize -> quick_1 [label="Quick fix\npath"];
  prioritize -> sys_1 [label="Systematic\npath"];

  // Quick Fix Path
  quick_1 -> quick_2;
  quick_2 -> quick_done;
  quick_done -> verify_start [label="yes"];
  quick_done -> identify_patterns [label="no\n(retry)"];

  // Systematic Fix Path
  sys_1 -> sys_2;
  sys_2 -> sys_3;
  sys_3 -> sys_4;
  sys_4 -> sys_next [label="yes"];
  sys_4 -> sys_2 [label="no\n(debug fix)"];
  sys_next -> sys_done;
  sys_done -> verify_start [label="yes"];
  sys_done -> sys_2 [label="no"];

  // Major Refactor Path
  refactor_warn -> refactor_decision;
  refactor_decision -> refactor_skip [label="yes\n(defer)"];
  refactor_decision -> refactor_proceed [label="no\n(critical)"];
  refactor_skip -> refactor_todo;
  refactor_todo -> sys_1;
  refactor_proceed -> sys_1;

  // Common Error Types (reference nodes, not in main flow)
  prioritize -> deprecated_api [style=dotted, label="if deprecated\nAPI found"];
  prioritize -> api_mismatch [style=dotted, label="if API\nmismatch"];
  prioritize -> type_mismatch [style=dotted, label="if type\nerror"];
  prioritize -> corrupted_file [style=dotted, label="if file\ncorrupted"];

  // Phase 5: Verification
  verify_start -> run_tsc_final;
  run_tsc_final -> check_scope;
  check_scope -> scope_note [label="yes\n(expected)"];
  check_scope -> investigate_test_fail [label="no\n(new errors)"];

  scope_note -> run_tests;
  run_tests -> tests_pass;
  tests_pass -> document [label="yes"];
  tests_pass -> investigate_test_fail [label="no"];
  investigate_test_fail -> sys_2 [label="fix and\nretry"];

  // Phase 6: Documentation
  document -> update_claude_md;
  update_claude_md -> commit;
  commit -> complete;

  // ========== LEGEND ==========
  subgraph cluster_legend {
    label="Legend";
    style=filled;
    fillcolor=white;

    legend_entry [shape=ellipse, label="Entry Point"];
    legend_action [shape=box, label="Action"];
    legend_decision [shape=diamond, label="Decision"];
    legend_warning [shape=octagon, label="Warning"];
    legend_exit [shape=doublecircle, label="Exit"];
  }
}
