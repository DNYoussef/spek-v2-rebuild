{
  "delegate.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "phase": "release-planning",
        "context": "{\"version\": \"v2.5.0\", \"type\": \"major release\", \"features\": \"15 new features, 32 bug fixes\", \"timeline\": \"3 weeks\"}",
        "reasoning": "For a major release planning phase, we need a coordination-focused drone to organize and structure the release process. The Orchestrator drone is best suited for this task as it specializes in high-level planning and coordination across teams. The task needs to encompass release scope definition, timeline planning, resource allocation, and risk assessment. Given the significant number of features and fixes, careful planning and coordination will be essential.",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"plan-major-release\",\n    \"description\": \"Create comprehensive release plan for v2.5.0 including feature coordination, timeline management, and risk mitigation\",\n    \"payload\": {\n        \"release_scope\": {\n            \"features\": 15,\n            \"bug_fixes\": 32,\n            \"timeline_weeks\": 3\n        },\n        \"deliverables\": {\n            \"release_schedule\": \"detailed timeline with milestones\",\n            \"feature_breakdown\": \"prioritized feature list with dependencies\",\n            \"resource_allocation\": \"team assignments and capacity planning\",\n            \"risk_assessment\": \"potential blockers and mitigation strategies\",\n            \"communication_plan\": \"stakeholder updates and sync meetings\"\n        },\n        \"milestones\": [\n            \"feature freeze date\",\n            \"code freeze date\",\n            \"QA completion date\",\n            \"release candidate date\",\n            \"final release date\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Complete release schedule with all milestones defined\",\n        \"All features and fixes properly prioritized and assigned\",\n        \"Resource conflicts identified and resolved\",\n        \"Risk mitigation strategies documented\",\n        \"Stakeholder sign-off obtained\",\n        \"Communication plan established\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "version-control",
        "context": "{\"strategy\": \"semantic versioning\", \"branches\": \"main, develop, release/*\", \"current_version\": \"2.4.3\"}",
        "reasoning": "For version control management, I'll delegate to the integration-engineer drone who specializes in managing repository structures and versioning. This task requires careful coordination of version numbers, branch management, and ensuring semantic versioning compliance. The integration-engineer has the necessary expertise to handle version bumping, branch creation, and maintaining version control standards.",
        "drone_task": "{\n    \"drone_id\": \"integration-engineer\",\n    \"task_type\": \"version-management\",\n    \"description\": \"Implement and maintain version control strategy using semantic versioning\",\n    \"payload\": {\n        \"current_version\": \"2.4.3\",\n        \"branching_strategy\": {\n            \"main\": \"production-ready code\",\n            \"develop\": \"integration branch\",\n            \"release\": \"release/* branches for versioning\"\n        },\n        \"version_rules\": {\n            \"major\": \"breaking changes\",\n            \"minor\": \"new features\",\n            \"patch\": \"bug fixes\"\n        },\n        \"actions\": [\n            \"validate current version\",\n            \"setup branch protection rules\",\n            \"configure version bump automation\",\n            \"document version control workflow\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Semantic versioning correctly implemented\",\n        \"Branch protection rules enforced\",\n        \"Version bump automation working\",\n        \"Documentation updated with version control workflow\",\n        \"All branches following naming convention\",\n        \"Version tags properly set and pushed\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "changelog-generation",
        "context": "{\"commits\": \"247 commits since last release\", \"format\": \"conventional commits\", \"audience\": \"developers and end users\"}",
        "reasoning": "For changelog generation, we'll assign this to the integration-engineer drone since it requires parsing commit history, understanding conventional commits format, and producing documentation that bridges technical and user-facing content. The task requires both technical accuracy and clear communication. The integration-engineer is best suited due to their expertise in working across different aspects of the codebase and ability to categorize changes meaningfully.",
        "drone_task": "{\n    \"drone_id\": \"integration-engineer\",\n    \"task_type\": \"generate-changelog\",\n    \"description\": \"Generate comprehensive changelog from conventional commits for the new release\",\n    \"payload\": {\n        \"commit_range\": \"last_release..HEAD\",\n        \"sections\": [\n            \"Features\",\n            \"Bug Fixes\",\n            \"Breaking Changes\",\n            \"Performance Improvements\",\n            \"Documentation\"\n        ],\n        \"format_rules\": {\n            \"technical_details\": \"include for developer audience\",\n            \"user_impact\": \"highlight for end-user audience\",\n            \"breaking_changes\": \"prominently display with migration steps\"\n        },\n        \"output_formats\": [\n            \"CHANGELOG.md\",\n            \"release-notes.html\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"All 247 commits properly categorized\",\n        \"Conventional commit format correctly parsed\",\n        \"Breaking changes clearly highlighted\",\n        \"Both technical and user-friendly descriptions included\",\n        \"Markdown and HTML formats generated\",\n        \"Links to relevant issues and PRs included\",\n        \"Proper formatting and structure maintained\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "release-candidate",
        "context": "{\"version\": \"v2.5.0-rc.1\", \"testing\": \"internal QA team\", \"feedback_window\": \"3 days\"}",
        "reasoning": "For a release candidate phase, we need a quality-focused drone to coordinate testing and feedback collection. The tester drone is best suited for this task as it specializes in validation and quality assurance. The task needs to encompass both technical validation and user feedback collection, with clear acceptance criteria for promoting the RC to final release.",
        "drone_task": "{\n    \"drone_id\": \"tester\",\n    \"task_type\": \"validate-release-candidate\",\n    \"description\": \"Coordinate testing and feedback collection for v2.5.0-rc.1\",\n    \"payload\": {\n        \"test_suite\": {\n            \"smoke_tests\": true,\n            \"regression_tests\": true,\n            \"performance_tests\": true,\n            \"security_scans\": true\n        },\n        \"feedback_collection\": {\n            \"internal_testing\": {\n                \"duration\": \"3 days\",\n                \"participants\": \"QA team\",\n                \"focus_areas\": [\n                    \"functionality\",\n                    \"usability\",\n                    \"performance\",\n                    \"edge cases\"\n                ]\n            },\n            \"documentation\": {\n                \"test_results\": \"detailed report\",\n                \"feedback_summary\": \"categorized issues\",\n                \"recommendations\": \"go/no-go decision\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"All automated test suites pass with >95% success rate\",\n        \"No critical or high-severity bugs found\",\n        \"Performance metrics within acceptable thresholds\",\n        \"Security scan reveals no vulnerabilities\",\n        \"QA team feedback collected and documented\",\n        \"All blocking issues resolved or documented\",\n        \"Go/no-go recommendation provided with evidence\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "production-release",
        "context": "{\"version\": \"v2.5.0\", \"deployment_strategy\": \"rolling update\", \"maintenance_window\": \"none (zero downtime)\"}",
        "reasoning": "For a production release with zero-downtime requirements, I'll delegate to the integration-engineer drone who specializes in deployment orchestration and production stability. The task needs to ensure proper sequencing of the rolling update, health checks, and rollback preparation. The integration-engineer drone has the necessary capabilities to handle complex deployment scenarios while maintaining system availability.",
        "drone_task": "{\n    \"drone_id\": \"integration-engineer\",\n    \"task_type\": \"execute-production-deployment\",\n    \"description\": \"Perform zero-downtime production deployment of v2.5.0 using rolling update strategy\",\n    \"payload\": {\n        \"version\": \"v2.5.0\",\n        \"strategy\": {\n            \"type\": \"rolling-update\",\n            \"batch_size\": \"20%\",\n            \"health_check_interval\": \"30s\",\n            \"timeout\": \"1h\"\n        },\n        \"steps\": [\n            \"Verify deployment prerequisites\",\n            \"Scale up new version pods\",\n            \"Health check new instances\",\n            \"Gradually redirect traffic\",\n            \"Scale down old version pods\",\n            \"Verify deployment completion\"\n        ],\n        \"rollback_plan\": {\n            \"trigger_conditions\": [\"health checks fail\", \"error rate exceeds 1%\"],\n            \"procedure\": \"reverse rolling update to previous version\"\n        }\n    },\n    \"acceptance_criteria\": [\n        \"All new pods running v2.5.0 are healthy\",\n        \"Zero downtime achieved during deployment\",\n        \"Error rate remains below threshold\",\n        \"Load balancer configuration updated\",\n        \"Old version pods properly terminated\",\n        \"Monitoring shows normal operation\",\n        \"Rollback plan verified and documented\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "hotfix-release",
        "context": "{\"severity\": \"critical security vulnerability\", \"affected_version\": \"v2.5.0\", \"fix_version\": \"v2.5.1\"}",
        "reasoning": "For a critical security hotfix, we need the orchestrator drone to coordinate an emergency release process. The orchestrator is best suited for this task as it can manage the expedited release workflow while ensuring all security and quality checks are maintained. The task needs to be structured with clear security validation steps and minimal but essential testing to ensure quick deployment without compromising system integrity.",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"emergency-hotfix-release\",\n    \"description\": \"Coordinate emergency security hotfix release from branching to deployment\",\n    \"payload\": {\n        \"version\": {\n            \"from\": \"v2.5.0\",\n            \"to\": \"v2.5.1\"\n        },\n        \"workflow_steps\": [\n            \"Create hotfix branch from v2.5.0 tag\",\n            \"Apply security patch\",\n            \"Run security validation suite\",\n            \"Execute critical path tests\",\n            \"Prepare release notes (security advisory)\",\n            \"Deploy to staging\",\n            \"Deploy to production\"\n        ],\n        \"notifications\": {\n            \"security_team\": \"immediate\",\n            \"stakeholders\": \"hourly\",\n            \"customers\": \"post-deployment\"\n        },\n        \"rollback_plan\": {\n            \"trigger_conditions\": [\"security validation failure\", \"critical service disruption\"],\n            \"steps\": [\"immediate rollback to v2.5.0\", \"incident communication\"]\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Security patch verified by security team\",\n        \"All critical path tests passing\",\n        \"Staging deployment successful\",\n        \"Production deployment completed\",\n        \"Security advisory prepared and reviewed\",\n        \"Incident response team on standby\",\n        \"Rollback plan validated\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "rollback-execution",
        "context": "{\"issue\": \"critical bug discovered post-release\", \"current_version\": \"v2.5.0\", \"rollback_to\": \"v2.4.3\"}",
        "reasoning": "For a critical rollback situation, we need the integration-engineer drone who specializes in deployment operations and system stability. The task requires immediate action with careful coordination to minimize downtime and ensure system integrity. The integration-engineer drone has the necessary permissions and expertise to execute the rollback while maintaining proper documentation and communication channels.",
        "drone_task": "{\n    \"drone_id\": \"integration-engineer\",\n    \"task_type\": \"execute-emergency-rollback\",\n    \"description\": \"Perform emergency rollback from v2.5.0 to v2.4.3 due to critical bug\",\n    \"payload\": {\n        \"current_version\": \"v2.5.0\",\n        \"target_version\": \"v2.4.3\",\n        \"steps\": [\n            \"Notify stakeholders of emergency rollback\",\n            \"Enable maintenance mode\",\n            \"Stop v2.5.0 services\",\n            \"Restore v2.4.3 artifacts\",\n            \"Update database schemas if needed\",\n            \"Restart services with v2.4.3\",\n            \"Verify system health\",\n            \"Disable maintenance mode\"\n        ],\n        \"communication\": {\n            \"channels\": [\"ops-emergency\", \"status-page\", \"customer-support\"],\n            \"templates\": [\"rollback-announcement\", \"status-updates\", \"completion-notice\"]\n        },\n        \"monitoring\": {\n            \"metrics\": [\"error_rates\", \"latency\", \"user_impact\"],\n            \"dashboards\": [\"system-health\", \"business-metrics\"]\n        }\n    },\n    \"acceptance_criteria\": [\n        \"System successfully running on v2.4.3\",\n        \"All critical services operational\",\n        \"No data loss during rollback\",\n        \"Monitoring shows normal metrics\",\n        \"Stakeholders notified of completion\",\n        \"Incident report documented\",\n        \"Root cause identified and tracked\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "release-automation",
        "context": "{\"goal\": \"automate release pipeline\", \"tools\": \"GitHub Actions + Semantic Release\", \"scope\": \"from commit to production\"}",
        "reasoning": "For release automation implementation, I'll assign the integration-engineer drone from the Princess-Dev group. This drone specializes in CI/CD pipelines and automation tooling. The task requires deep understanding of GitHub Actions and Semantic Release integration, with focus on creating a robust automated pipeline. The task will be structured to ensure proper setup, testing, and documentation of the automation workflow.",
        "drone_task": "{\n    \"drone_id\": \"integration-engineer\",\n    \"task_type\": \"implement-release-automation\",\n    \"description\": \"Set up automated release pipeline using GitHub Actions and Semantic Release\",\n    \"payload\": {\n        \"components\": {\n            \"version_management\": \"semantic-release configuration\",\n            \"ci_pipeline\": \"GitHub Actions workflow files\",\n            \"automation_steps\": [\n                \"version bump\",\n                \"changelog generation\",\n                \"artifact building\",\n                \"testing\",\n                \"deployment\"\n            ],\n            \"environments\": [\n                \"staging\",\n                \"production\"\n            ]\n        },\n        \"configuration\": {\n            \"semantic_release\": {\n                \"preset\": \"conventional\",\n                \"branches\": [\"main\", \"next\"],\n                \"plugins\": [\"changelog\", \"git\", \"npm\"]\n            },\n            \"github_actions\": {\n                \"triggers\": [\"push\", \"pull_request\", \"release\"],\n                \"environments\": [\"staging\", \"production\"],\n                \"secrets_management\": \"GitHub Secrets\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Pipeline successfully triggers on new commits\",\n        \"Semantic versioning correctly applied\",\n        \"Changelog automatically generated\",\n        \"Artifacts built and published\",\n        \"Staging deployment automated\",\n        \"Production deployment requires approval\",\n        \"Roll-back procedure documented\",\n        \"Pipeline status notifications configured\",\n        \"Documentation updated with new process\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "dependency-updates",
        "context": "{\"dependencies\": \"150 npm packages, 45 Python packages\", \"updates\": \"23 security updates, 67 feature updates\", \"strategy\": \"Renovate bot for automation\"}",
        "reasoning": "For dependency updates, we need a specialized integration engineer drone to handle the complex task of analyzing and updating multiple package dependencies across different languages. The integration-engineer drone is best suited due to its expertise in managing cross-language dependencies, security implications, and automated update processes. The task requires careful orchestration of Renovate bot configurations, dependency analysis, and validation of updates to prevent breaking changes.",
        "drone_task": "{\n    \"drone_id\": \"integration-engineer\",\n    \"task_type\": \"dependency-management\",\n    \"description\": \"Analyze, update, and validate project dependencies using Renovate bot automation\",\n    \"payload\": {\n        \"scope\": {\n            \"npm_packages\": 150,\n            \"python_packages\": 45,\n            \"security_updates\": 23,\n            \"feature_updates\": 67\n        },\n        \"actions\": {\n            \"configure_renovate\": {\n                \"schedule\": \"weekly\",\n                \"grouping\": \"package ecosystem\",\n                \"automerge\": \"patch and minor versions\"\n            },\n            \"priority_order\": [\n                \"security patches\",\n                \"breaking changes\",\n                \"feature updates\",\n                \"maintenance updates\"\n            ],\n            \"validation_steps\": [\n                \"dependency tree analysis\",\n                \"compatibility checks\",\n                \"test suite execution\",\n                \"integration verification\"\n            ]\n        }\n    },\n    \"acceptance_criteria\": [\n        \"All security updates successfully applied and validated\",\n        \"Renovate bot configured and operational\",\n        \"No breaking changes introduced\",\n        \"All tests passing after updates\",\n        \"Update changelog generated\",\n        \"Dependency tree remains consistent\",\n        \"Update process documented\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "feature-flags",
        "context": "{\"features\": \"5 new features behind flags\", \"tool\": \"LaunchDarkly\", \"rollout\": \"gradual rollout to user segments\"}",
        "reasoning": "For feature flag management and rollout strategy, I'll assign this to the orchestrator drone from the Princess-Coordination group. This drone specializes in coordinating complex rollouts and managing feature toggles. The task requires careful orchestration of multiple features, monitoring of user segments, and coordination with LaunchDarkly's platform. The orchestrator drone will ensure proper implementation and gradual rollout while maintaining system stability.",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"feature-flag-management\",\n    \"description\": \"Configure and manage feature flags for gradual rollout of new features\",\n    \"payload\": {\n        \"feature_flags\": {\n            \"count\": 5,\n            \"platform\": \"LaunchDarkly\",\n            \"rollout_strategy\": {\n                \"phases\": [\"internal\", \"beta\", \"early-access\", \"general-availability\"],\n                \"monitoring_points\": [\"error rates\", \"performance metrics\", \"user feedback\"]\n            },\n            \"user_segments\": {\n                \"targeting_rules\": [\"geography\", \"user tier\", \"usage patterns\"],\n                \"percentage_rollouts\": [5, 20, 50, 100]\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"All 5 feature flags properly configured in LaunchDarkly\",\n        \"Rollout phases defined with clear criteria for progression\",\n        \"Monitoring dashboard setup for each feature\",\n        \"Kill-switch mechanism verified for each flag\",\n        \"Documentation updated with flag details and rollout plan\"\n    ]\n}"
      }
    ],
    "signature": {
      "instructions": "Delegate task to drone agent with clear instructions.\n\nYou are a Princess agent coordinating your specialized drone hive.\nYour role is to take high-level workflow phases and convert them\ninto specific, actionable tasks for your drone agents.\n\nPrincess-Dev drones: coder, reviewer, debugger, integration-engineer\nPrincess-Quality drones: tester, nasa-enforcer, theater-detector, fsm-analyzer\nPrincess-Coordination drones: orchestrator, planner, cost-tracker\n\nEach drone task must have:\n- Specific drone agent assignment\n- Task type matching drone capabilities\n- Clear context from previous phases\n- Concrete deliverables\n- Quality gates/acceptance criteria\n\nFollow the 26 prompt engineering principles:\n- Clarity: Unambiguous instructions\n- Context: Include relevant phase results\n- Constraints: Respect drone capabilities\n- Structure: Output valid JSON format",
      "fields": [
        {
          "prefix": "Phase:",
          "description": "Development phase to execute (design, code, test, review, etc.)"
        },
        {
          "prefix": "Context:",
          "description": "Context and results from previous phases that this phase depends on"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "Delegation reasoning explaining drone selection and task structure"
        },
        {
          "prefix": "Drone Task:",
          "description": "Structured task for drone agent as JSON object. Must have: {'drone_id': str, 'task_type': str, 'description': str, 'payload': dict, 'acceptance_criteria': list[str]}"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.0"
    }
  }
}
