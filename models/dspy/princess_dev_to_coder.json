{
  "delegate.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "phase": "code",
        "context": "{\"previous_phase\": \"design\", \"architecture\": \"REST API with PostgreSQL\", \"requirements\": \"OAuth2 login endpoints\"}",
        "reasoning": "For implementing OAuth2 login endpoints, I'll assign this to the coder drone since it requires precise implementation of authentication flows and security best practices. The task needs to cover both authorization and token endpoints, handle different grant types, and ensure proper security measures. The coder drone is best suited for this as it specializes in implementing complex backend functionality with security implications.",
        "drone_task": "{\n    \"drone_id\": \"coder\",\n    \"task_type\": \"implement\",\n    \"description\": \"Implement OAuth2 authentication endpoints for REST API\",\n    \"payload\": {\n        \"endpoints\": [\n            \"/oauth/authorize\",\n            \"/oauth/token\",\n            \"/oauth/revoke\"\n        ],\n        \"grant_types\": [\n            \"authorization_code\",\n            \"refresh_token\",\n            \"client_credentials\"\n        ],\n        \"security_requirements\": {\n            \"token_expiration\": \"1 hour\",\n            \"refresh_token\": \"30 days\",\n            \"encryption\": \"PKCE for authorization code\"\n        },\n        \"database_schema\": {\n            \"tables\": [\"oauth_clients\", \"oauth_tokens\", \"oauth_codes\"]\n        }\n    },\n    \"acceptance_criteria\": [\n        \"All OAuth2 flows must pass standard OAuth2 test suite\",\n        \"Token encryption using industry standard algorithms\",\n        \"Rate limiting implemented on token endpoints\",\n        \"Proper error responses following OAuth2 spec\",\n        \"Database indices for token lookups\",\n        \"Logging for security events\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "code",
        "context": "{\"previous_phase\": \"architecture\", \"architecture\": \"React component library\", \"requirements\": \"Reusable button component with variants\"}",
        "reasoning": "For implementing a reusable button component in React, I'll assign this to the coder drone. The task requires careful attention to component architecture, prop types, and styling variants. The coder drone specializes in clean, maintainable component implementation with TypeScript and styled-components. The task should focus on accessibility, reusability, and thorough documentation.",
        "drone_task": "{\n  \"drone_id\": \"coder\",\n  \"task_type\": \"implement\",\n  \"description\": \"Create a reusable Button component with multiple variants\",\n  \"payload\": {\n    \"component_name\": \"Button\",\n    \"variants\": [\"primary\", \"secondary\", \"outline\", \"text\"],\n    \"props\": {\n      \"size\": [\"sm\", \"md\", \"lg\"],\n      \"disabled\": \"boolean\",\n      \"loading\": \"boolean\",\n      \"leftIcon\": \"ReactNode\",\n      \"rightIcon\": \"ReactNode\"\n    },\n    \"styling\": \"styled-components with theme integration\",\n    \"documentation\": \"Storybook stories with examples\",\n    \"testing\": \"React Testing Library setup\"\n  },\n  \"acceptance_criteria\": [\n    \"TypeScript types and interfaces defined\",\n    \"All variants implemented with consistent API\",\n    \"Accessible with ARIA attributes\",\n    \"Responsive hover/focus states\",\n    \"Loading state animation\",\n    \"Unit tests >90% coverage\",\n    \"Storybook documentation complete\"\n  ]\n}"
      },
      {
        "augmented": true,
        "phase": "code",
        "context": "{\"previous_phase\": \"design\", \"architecture\": \"Microservices with RabbitMQ\", \"requirements\": \"Message queue consumer service\"}",
        "reasoning": "For implementing a message queue consumer service in a microservices architecture with RabbitMQ, I'll assign this to the coder drone. The task requires specific expertise in:\n1. Message queue patterns and RabbitMQ client implementation\n2. Error handling and dead letter queues\n3. Message acknowledgment and retry logic\n4. Concurrent message processing\n\nThe coder drone is best suited due to their expertise in implementing distributed systems patterns and async processing. The task will be structured with clear acceptance criteria focusing on reliability and scalability.",
        "drone_task": "{\n    \"drone_id\": \"coder\",\n    \"task_type\": \"implement\",\n    \"description\": \"Implement RabbitMQ consumer service with retry mechanism\",\n    \"payload\": {\n        \"components\": {\n            \"consumer\": \"Message consumer with prefetch control\",\n            \"handler\": \"Message processing pipeline\",\n            \"dlq\": \"Dead letter queue configuration\",\n            \"monitoring\": \"Consumer health metrics\"\n        },\n        \"features\": [\n            \"Concurrent message processing\",\n            \"Automatic retry with backoff\",\n            \"Dead letter queue routing\",\n            \"Health check endpoints\"\n        ],\n        \"technical_specs\": {\n            \"language\": \"Node.js/TypeScript\",\n            \"framework\": \"NestJS\",\n            \"queue_config\": {\n                \"prefetch\": 10,\n                \"max_retries\": 3,\n                \"timeout\": \"30s\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Successfully processes messages from configured queues\",\n        \"Implements retry mechanism with exponential backoff\",\n        \"Routes failed messages to DLQ after max retries\",\n        \"Provides health check endpoint with consumer status\",\n        \"Handles graceful shutdown with in-flight messages\",\n        \"Includes monitoring metrics for queue depth and processing time\",\n        \"Maintains idempotency for message processing\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "code",
        "context": "{\"previous_phase\": \"specification\", \"architecture\": \"GraphQL API with Apollo Server\", \"requirements\": \"User profile queries and mutations\"}",
        "reasoning": "For implementing GraphQL user profile functionality, I'll assign this to the coder drone since it requires writing resolver functions, schema definitions, and data access logic. The task needs clear specifications around the GraphQL types, queries, and mutations, along with proper error handling and validation. The coder drone is best suited for this as it specializes in implementation tasks and has expertise in GraphQL patterns.",
        "drone_task": "{\n  \"drone_id\": \"coder\",\n  \"task_type\": \"implement\",\n  \"description\": \"Implement GraphQL user profile operations with Apollo Server\",\n  \"payload\": {\n    \"schema_types\": {\n      \"User\": [\"id\", \"email\", \"name\", \"avatar\", \"preferences\"],\n      \"UserInput\": [\"email\", \"name\", \"avatar\", \"preferences\"]\n    },\n    \"operations\": {\n      \"queries\": [\"getUser\", \"searchUsers\"],\n      \"mutations\": [\"updateProfile\", \"deleteProfile\"]\n    },\n    \"features\": [\n      \"DataLoader for N+1 prevention\",\n      \"Input validation\",\n      \"Error handling with proper codes\",\n      \"Field-level permissions\"\n    ],\n    \"testing\": \"Jest with mock database\"\n  },\n  \"acceptance_criteria\": [\n    \"All resolvers must include error handling\",\n    \"95% test coverage for resolvers\",\n    \"Documentation with GraphQL examples\",\n    \"Performance testing for nested queries\",\n    \"Input validation for all mutations\"\n  ]\n}"
      },
      {
        "augmented": true,
        "phase": "code",
        "context": "{\"previous_phase\": \"design\", \"architecture\": \"Mobile app with React Native\", \"requirements\": \"Offline-first data sync\"}",
        "reasoning": "For implementing offline-first data sync in React Native, I'll assign this to the coder drone. This requires careful handling of local storage, conflict resolution, and network state management. The task needs to be structured to ensure robust sync logic with clear acceptance criteria around error cases and edge conditions.",
        "drone_task": "{\n    \"drone_id\": \"coder\",\n    \"task_type\": \"implement\",\n    \"description\": \"Implement offline-first data synchronization system using React Native\",\n    \"payload\": {\n        \"storage\": {\n            \"local\": \"AsyncStorage for data persistence\",\n            \"sync_queue\": \"Queue for pending operations\",\n            \"conflict_resolution\": \"Last-write-wins with timestamp\"\n        },\n        \"features\": [\n            \"Background sync when online\",\n            \"Optimistic UI updates\",\n            \"Conflict detection and resolution\",\n            \"Retry mechanism for failed syncs\"\n        ],\n        \"network_handling\": {\n            \"detection\": \"NetInfo for connectivity status\",\n            \"batch_operations\": \"Bulk sync when reconnecting\",\n            \"debounce\": \"5 second delay between sync attempts\"\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Data persists across app restarts\",\n        \"Sync occurs automatically when online\",\n        \"Conflicts are resolved without data loss\",\n        \"UI remains responsive during sync\",\n        \"Failed operations are retried automatically\",\n        \"Sync status is visible to user\",\n        \"Unit test coverage >90%\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "code",
        "context": "{\"previous_phase\": \"architecture\", \"architecture\": \"Python CLI tool\", \"requirements\": \"File processing with progress tracking\"}",
        "reasoning": "For this CLI file processing task, I'll assign it to the coder drone since it requires implementing core functionality in Python. The task needs clear specifications around progress tracking, file handling, and user feedback. The coder drone is well-suited for implementing command-line interfaces and file system operations. I'll structure the task to emphasize clean code practices and proper error handling.",
        "drone_task": "{\n    \"drone_id\": \"coder\",\n    \"task_type\": \"implement\",\n    \"description\": \"Create Python CLI tool for file processing with progress tracking\",\n    \"payload\": {\n        \"core_features\": [\n            \"tqdm progress bar integration\",\n            \"chunked file reading\",\n            \"concurrent processing\"\n        ],\n        \"cli_structure\": {\n            \"arguments\": [\"input_path\", \"output_path\", \"--batch-size\", \"--workers\"],\n            \"progress_display\": \"tqdm with percentage and ETA\",\n            \"error_handling\": \"Graceful failures with user feedback\"\n        },\n        \"file_handling\": {\n            \"read_mode\": \"binary chunks\",\n            \"write_mode\": \"append with buffer\",\n            \"memory_management\": \"Stream processing\"\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Progress bar shows accurate percentage and ETA\",\n        \"Memory usage stays constant regardless of file size\",\n        \"Proper error messages for common failure cases\",\n        \"Processing speed meets minimum 10MB/s requirement\",\n        \"Unit tests cover core functionality\",\n        \"Documentation includes usage examples\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "code",
        "context": "{\"previous_phase\": \"design\", \"architecture\": \"Serverless functions on AWS Lambda\", \"requirements\": \"Image upload and thumbnail generation\"}",
        "reasoning": "For this serverless image processing task, I'll assign it to the coder drone since it requires implementing AWS Lambda functions with image manipulation. The task needs to handle both upload logic and thumbnail generation, so I'll structure it as a clear implementation task with specific AWS services and image processing requirements. The acceptance criteria will focus on error handling, performance, and proper cloud resource management.",
        "drone_task": "{\n    \"drone_id\": \"coder\",\n    \"task_type\": \"implement\",\n    \"description\": \"Create AWS Lambda functions for image upload and thumbnail generation\",\n    \"payload\": {\n        \"components\": {\n            \"upload_handler\": \"S3 presigned URL generation\",\n            \"thumbnail_processor\": \"Lambda trigger on S3 upload\",\n            \"image_processing\": \"Sharp.js for resizing\"\n        },\n        \"specifications\": {\n            \"upload\": {\n                \"max_size\": \"10MB\",\n                \"allowed_types\": [\"image/jpeg\", \"image/png\"],\n                \"storage\": \"S3 bucket with lifecycle rules\"\n            },\n            \"thumbnail\": {\n                \"sizes\": [\"150x150\", \"300x300\"],\n                \"format\": \"jpeg\",\n                \"quality\": 80\n            }\n        },\n        \"environment\": {\n            \"runtime\": \"Node.js 16.x\",\n            \"memory\": \"1024MB\",\n            \"timeout\": \"30 seconds\"\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Successful upload with presigned URLs\",\n        \"Thumbnail generation within 5 seconds\",\n        \"Error handling for invalid images\",\n        \"CloudWatch logs for monitoring\",\n        \"Resource cleanup after processing\",\n        \"Memory usage under 512MB\",\n        \"Unit tests with >80% coverage\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "code",
        "context": "{\"previous_phase\": \"specification\", \"architecture\": \"WebSocket real-time service\", \"requirements\": \"Chat room with presence tracking\"}",
        "reasoning": "For implementing a WebSocket-based chat room with presence tracking, I'll assign this to the coder drone. The task requires expertise in real-time communication protocols, state management, and connection handling. The coder drone is best suited due to their specialization in implementing core functionality with proper error handling and performance considerations.\n\nThe task will be structured to focus on three main components:\n1. WebSocket connection management\n2. Chat message handling\n3. Presence tracking system\n\nGiven the real-time nature, special attention will be paid to connection stability, reconnection logic, and state synchronization.",
        "drone_task": "{\n    \"drone_id\": \"coder\",\n    \"task_type\": \"implement\",\n    \"description\": \"Implement WebSocket-based chat room with real-time presence tracking\",\n    \"payload\": {\n        \"components\": {\n            \"websocket\": {\n                \"events\": [\"connect\", \"disconnect\", \"message\", \"presence\"],\n                \"heartbeat\": \"30 second interval\",\n                \"reconnection\": \"Exponential backoff strategy\"\n            },\n            \"chat\": {\n                \"message_format\": {\"type\": \"string\", \"user\": \"string\", \"timestamp\": \"ISO string\"},\n                \"history\": \"Last 50 messages cached\"\n            },\n            \"presence\": {\n                \"user_status\": [\"online\", \"away\", \"offline\"],\n                \"tracking\": \"Last active timestamp\",\n                \"cleanup\": \"Remove after 60s inactive\"\n            }\n        },\n        \"dependencies\": [\"WebSocket server endpoint\", \"Redis for presence\"],\n        \"estimated_minutes\": 120\n    },\n    \"acceptance_criteria\": [\n        \"WebSocket connections handle 1000+ concurrent users\",\n        \"Message delivery latency < 100ms\",\n        \"Presence updates propagate within 1 second\",\n        \"Graceful reconnection on connection loss\",\n        \"Memory usage < 50MB per 1000 connections\",\n        \"All error scenarios handled and logged\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "code",
        "context": "{\"previous_phase\": \"design\", \"architecture\": \"Data pipeline with Apache Airflow\", \"requirements\": \"ETL pipeline for analytics\"}",
        "reasoning": "For this ETL pipeline implementation, I'll assign the coder drone as it requires core development work. The task involves creating DAGs in Apache Airflow for data extraction, transformation, and loading. Given the analytics focus, we need strong data validation and monitoring capabilities. The task will be structured to ensure proper error handling, logging, and performance optimization.",
        "drone_task": "{\n    \"drone_id\": \"coder\",\n    \"task_type\": \"implement\",\n    \"description\": \"Create Airflow DAG for analytics ETL pipeline\",\n    \"payload\": {\n        \"dag_structure\": {\n            \"schedule\": \"0 2 * * *\",\n            \"tasks\": [\"extract_from_sources\", \"clean_data\", \"transform_metrics\", \"load_warehouse\"],\n            \"dependencies\": \"sequential_workflow\"\n        },\n        \"features\": {\n            \"extraction\": \"Multiple source connectors\",\n            \"transformation\": \"Pandas operations for metrics\",\n            \"loading\": \"Warehouse bulk insert\",\n            \"monitoring\": \"Airflow sensors and alerts\"\n        },\n        \"optimization\": {\n            \"parallel_processing\": \"Use TaskGroups\",\n            \"resource_management\": \"Pool configurations\",\n            \"retries\": \"Exponential backoff\"\n        }\n    },\n    \"acceptance_criteria\": [\n        \"All tasks have retry logic with proper timeout\",\n        \"Logging implemented at each pipeline stage\",\n        \"Data validation checks between transformations\",\n        \"Performance metrics captured via Airflow\",\n        \"Failure notifications configured\",\n        \"Documentation for DAG configuration\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "code",
        "context": "{\"previous_phase\": \"architecture\", \"architecture\": \"Vue.js SPA with Vuex\", \"requirements\": \"Shopping cart state management\"}",
        "reasoning": "For implementing shopping cart state management in Vue.js with Vuex, I'll assign this to the coder drone. The task requires expertise in Vue.js ecosystem, state management patterns, and frontend architecture. The coder drone is best suited due to their specialization in implementation tasks and familiarity with reactive frameworks.\n\nThe task needs clear specifications around cart operations, persistence, and performance considerations. I'll structure it to focus on Vuex store implementation with actions, mutations, and getters, while ensuring proper type safety and testing requirements.",
        "drone_task": "{\n  \"drone_id\": \"coder\",\n  \"task_type\": \"implement\",\n  \"description\": \"Implement Vuex store module for shopping cart functionality\",\n  \"payload\": {\n    \"store_module\": {\n      \"state\": [\"items\", \"total\", \"currency\", \"status\"],\n      \"actions\": [\"addItem\", \"removeItem\", \"updateQuantity\", \"clearCart\"],\n      \"mutations\": [\"SET_ITEMS\", \"UPDATE_TOTAL\", \"SET_STATUS\"],\n      \"getters\": [\"itemCount\", \"cartTotal\", \"itemsWithTax\"]\n    },\n    \"persistence\": \"localStorage with expiry\",\n    \"performance\": \"Memoized getters, batched updates\",\n    \"type_safety\": \"TypeScript interfaces for all models\"\n  },\n  \"acceptance_criteria\": [\n    \"All Vuex actions must return Promises\",\n    \"Cart state persists page refreshes\",\n    \"Computed properties update reactively\",\n    \"Unit tests cover all mutations\",\n    \"TypeScript compilation passes\",\n    \"No memory leaks in Vue devtools\"\n  ]\n}"
      }
    ],
    "signature": {
      "instructions": "Delegate task to drone agent with clear instructions.\n\nYou are a Princess agent coordinating your specialized drone hive.\nYour role is to take high-level workflow phases and convert them\ninto specific, actionable tasks for your drone agents.\n\nPrincess-Dev drones: coder, reviewer, debugger, integration-engineer\nPrincess-Quality drones: tester, nasa-enforcer, theater-detector, fsm-analyzer\nPrincess-Coordination drones: orchestrator, planner, cost-tracker\n\nEach drone task must have:\n- Specific drone agent assignment\n- Task type matching drone capabilities\n- Clear context from previous phases\n- Concrete deliverables\n- Quality gates/acceptance criteria\n\nFollow the 26 prompt engineering principles:\n- Clarity: Unambiguous instructions\n- Context: Include relevant phase results\n- Constraints: Respect drone capabilities\n- Structure: Output valid JSON format",
      "fields": [
        {
          "prefix": "Phase:",
          "description": "Development phase to execute (design, code, test, review, etc.)"
        },
        {
          "prefix": "Context:",
          "description": "Context and results from previous phases that this phase depends on"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "Delegation reasoning explaining drone selection and task structure"
        },
        {
          "prefix": "Drone Task:",
          "description": "Structured task for drone agent as JSON object. Must have: {'drone_id': str, 'task_type': str, 'description': str, 'payload': dict, 'acceptance_criteria': list[str]}"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.0"
    }
  }
}
