{
  "decompose.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "task_description": "Implement CI/CD pipeline with GitHub Actions",
        "objective": "Automated testing, building, and deployment workflow",
        "reasoning": "To achieve automated testing, building, and deployment, we need to break down the CI/CD pipeline implementation into smaller, manageable tasks. First, we need to define the workflow and configure GitHub Actions. Then, we'll implement automated testing, building, and deployment steps. Finally, we'll monitor and optimize the pipeline for performance and reliability.",
        "subtasks": "[\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"design\",\n    \"description\": \"Design CI/CD workflow and branching strategy\",\n    \"dependencies\": [],\n    \"estimated_minutes\": 30\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Configure GitHub Actions workflow file\",\n    \"dependencies\": [\"design\"],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-quality\",\n    \"task_type\": \"test\",\n    \"description\": \"Implement automated unit and integration tests\",\n    \"dependencies\": [\"code\"],\n    \"estimated_minutes\": 60\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement build and packaging steps\",\n    \"dependencies\": [\"test\"],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement deployment steps to staging environment\",\n    \"dependencies\": [\"code\"],\n    \"estimated_minutes\": 45\n  },\n    {\n    \"princess\": \"princess-quality\",\n    \"task_type\": \"test\",\n    \"description\": \"Run end-to-end tests on staging environment\",\n    \"dependencies\": [\"code\"],\n    \"estimated_minutes\": 60\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement deployment steps to production environment\",\n    \"dependencies\": [\"test\"],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-coordination\",\n    \"task_type\": \"monitor\",\n    \"description\": \"Monitor pipeline execution and performance\",\n    \"dependencies\": [\"code\"],\n    \"estimated_minutes\": 30\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"review\",\n    \"description\": \"Optimize pipeline for speed and reliability\",\n    \"dependencies\": [\"monitor\"],\n    \"estimated_minutes\": 30\n  }\n]"
      },
      {
        "augmented": true,
        "task_description": "Build Redis caching layer for API responses",
        "objective": "Cache-aside pattern with TTL management and invalidation",
        "reasoning": "The task is to implement a Redis caching layer for API responses. This involves designing the caching strategy, implementing the cache-aside pattern, setting up TTL management, and handling cache invalidation. The subtasks are broken down to cover these aspects, assigning them to the appropriate princess.",
        "subtasks": "[\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"design\",\n    \"description\": \"Design cache key structure and TTL strategy\",\n    \"dependencies\": [],\n    \"estimated_minutes\": 30\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement Redis connection and client setup\",\n    \"dependencies\": [],\n    \"estimated_minutes\": 25\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement cache-aside pattern for API endpoints\",\n    \"dependencies\": [\n      \"design\",\n      \"redis_setup\"\n    ],\n    \"estimated_minutes\": 45\n  },\n    {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement cache invalidation logic on data changes\",\n    \"dependencies\": [\n      \"design\",\n      \"redis_setup\",\n      \"cache_aside\"\n    ],\n    \"estimated_minutes\": 40\n  },\n  {\n    \"princess\": \"princess-quality\",\n    \"task_type\": \"test\",\n    \"description\": \"Test cache hit ratio and performance improvements\",\n    \"dependencies\": [\n      \"cache_aside\",\n      \"cache_invalidation\"\n    ],\n    \"estimated_minutes\": 35\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"review\",\n    \"description\": \"Review code for race conditions and cache consistency\",\n    \"dependencies\": [\n      \"test\"\n    ],\n    \"estimated_minutes\": 25\n  }\n]"
      },
      {
        "augmented": true,
        "task_description": "Implement user profile page with avatar upload",
        "objective": "CRUD operations + S3 file upload with 80% test coverage",
        "reasoning": "The task requires implementing a user profile page with CRUD operations and avatar upload functionality. This involves designing the data model, implementing the backend API, creating the frontend UI, integrating with S3 for file storage, and ensuring sufficient test coverage. The subtasks are broken down to address each of these aspects in a structured manner.",
        "subtasks": "[\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"design\",\n    \"description\": \"Design user profile data model and API endpoints\",\n    \"dependencies\": [],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement backend API for user profile CRUD operations\",\n    \"dependencies\": [\n      \"Design user profile data model and API endpoints\"\n    ],\n    \"estimated_minutes\": 60\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement frontend UI for user profile page\",\n    \"dependencies\": [\n      \"Design user profile data model and API endpoints\"\n    ],\n    \"estimated_minutes\": 50\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Integrate S3 for avatar upload and storage\",\n    \"dependencies\": [\n      \"Implement backend API for user profile CRUD operations\",\n      \"Implement frontend UI for user profile page\"\n    ],\n    \"estimated_minutes\": 55\n  },\n  {\n    \"princess\": \"princess-quality\",\n    \"task_type\": \"test\",\n    \"description\": \"Write unit and integration tests for backend API (80% coverage)\",\n    \"dependencies\": [\n      \"Implement backend API for user profile CRUD operations\",\n      \"Integrate S3 for avatar upload and storage\"\n    ],\n    \"estimated_minutes\": 60\n  },\n    {\n    \"princess\": \"princess-quality\",\n    \"task_type\": \"test\",\n    \"description\": \"Write end-to-end tests for user profile page functionality\",\n    \"dependencies\": [\n      \"Implement frontend UI for user profile page\",\n      \"Integrate S3 for avatar upload and storage\"\n    ],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"debug\",\n    \"description\": \"Debug and fix any issues identified during testing\",\n    \"dependencies\": [\n      \"Write unit and integration tests for backend API (80% coverage)\",\n      \"Write end-to-end tests for user profile page functionality\"\n    ],\n    \"estimated_minutes\": 40\n  }\n]"
      },
      {
        "augmented": true,
        "task_description": "Implement OAuth2 PKCE flow for mobile apps",
        "objective": "Secure authentication without client secrets",
        "reasoning": "The objective is to implement OAuth2 PKCE flow for mobile apps, ensuring secure authentication without relying on client secrets. This requires designing the flow, implementing the code exchange, integrating with the authorization server, and testing the security aspects. The subtasks are broken down to cover design, coding, debugging, and security review, with dependencies to ensure a logical order of execution.",
        "subtasks": "[\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"design\",\n    \"description\": \"Design PKCE flow and code exchange mechanism for mobile app\",\n    \"dependencies\": [],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement code verifier and challenge generation\",\n    \"dependencies\": [\n      \"design\"\n    ],\n    \"estimated_minutes\": 50\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Integrate with authorization server to exchange code for tokens\",\n    \"dependencies\": [\n      \"design\",\n      \"code\"\n    ],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"debug\",\n    \"description\": \"Test PKCE flow with different authorization servers and mobile platforms\",\n    \"dependencies\": [\n      \"code\"\n    ],\n    \"estimated_minutes\": 40\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"review\",\n    \"description\": \"Security review for code injection and token storage\",\n    \"dependencies\": [\n      \"debug\"\n    ],\n    \"estimated_minutes\": 30\n  }\n]"
      },
      {
        "augmented": true,
        "task_description": "Design and implement PostgreSQL database schema with migrations",
        "objective": "Normalized schema with foreign keys, indexes, and migration system",
        "reasoning": "The task requires designing and implementing a PostgreSQL database schema with migrations. This can be broken down into smaller, manageable subtasks. First, the schema needs to be designed, including tables, columns, data types, and relationships. Then, indexes and foreign keys need to be added to optimize performance and ensure data integrity. Next, a migration system needs to be set up to manage schema changes over time. Finally, the schema and migrations need to be tested to ensure they work as expected. Each of these subtasks can be assigned to a specific princess with a clear description, dependencies, and estimated time.",
        "subtasks": "[\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"design\",\n    \"description\": \"Design the initial database schema, including tables, columns, data types, and relationships, based on the application's data requirements. Document the schema design.\",\n    \"dependencies\": [],\n    \"estimated_minutes\": 60\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement the database schema in PostgreSQL, creating tables and defining constraints based on the design. Use a database migration tool (e.g., Alembic, Flyway) to manage schema changes.\",\n    \"dependencies\": [\n      \"design\"\n    ],\n    \"estimated_minutes\": 60\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Add indexes to frequently queried columns to improve query performance. Implement foreign key constraints to enforce data integrity and relationships between tables.\",\n    \"dependencies\": [\n      \"code\"\n    ],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Create initial database migrations to set up the schema. Implement seed data migrations to populate the database with initial data, if needed.\",\n    \"dependencies\": [\n      \"code\"\n    ],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-quality\",\n    \"task_type\": \"test\",\n    \"description\": \"Test the database schema and migrations by creating, reading, updating, and deleting data. Verify that foreign key constraints and indexes are working correctly. Test migration rollback and upgrade processes.\",\n    \"dependencies\": [\n      \"code\"\n    ],\n    \"estimated_minutes\": 60\n  }\n]"
      },
      {
        "augmented": true,
        "task_description": "Implement disaster recovery plan with automated backups",
        "objective": "RTO/RPO compliance with tested recovery procedures",
        "reasoning": "To achieve RTO/RPO compliance, we need to define backup frequency, retention policies, and recovery procedures. The plan must cover database, application code, and configuration. Automation is key for minimizing downtime. Testing the recovery process is crucial to validate the plan's effectiveness.",
        "subtasks": "[{\"princess\": \"princess-coordination\", \"task_type\": \"planning\", \"description\": \"Define RTO and RPO targets based on business requirements\", \"dependencies\": [], \"estimated_minutes\": 30}, {\"princess\": \"princess-dev\", \"task_type\": \"design\", \"description\": \"Design backup strategy for database, application code, and configuration\", \"dependencies\": [\"planning\"], \"estimated_minutes\": 45}, {\"princess\": \"princess-dev\", \"task_type\": \"code\", \"description\": \"Implement automated database backups to cloud storage\", \"dependencies\": [\"design\"], \"estimated_minutes\": 50}, {\"princess\": \"princess-dev\", \"task_type\": \"code\", \"description\": \"Implement application code and configuration backups\", \"dependencies\": [\"design\"], \"estimated_minutes\": 40}, {\"princess\": \"princess-dev\", \"task_type\": \"design\", \"description\": \"Design recovery procedures for different failure scenarios\", \"dependencies\": [\"design\"], \"estimated_minutes\": 35}, {\"princess\": \"princess-dev\", \"task_type\": \"code\", \"description\": \"Automate recovery procedures using infrastructure-as-code\", \"dependencies\": [\"design\"], \"estimated_minutes\": 55}, {\"princess\": \"princess-quality\", \"task_type\": \"testing\", \"description\": \"Test recovery procedures in a staging environment\", \"dependencies\": [\"code\"], \"estimated_minutes\": 60}, {\"princess\": \"princess-coordination\", \"task_type\": \"documentation\", \"description\": \"Document the disaster recovery plan and procedures\", \"dependencies\": [\"testing\"], \"estimated_minutes\": 45}, {\"princess\": \"princess-coordination\", \"task_type\": \"review\", \"description\": \"Review and update the disaster recovery plan regularly\", \"dependencies\": [\"documentation\"], \"estimated_minutes\": 30}]"
      },
      {
        "augmented": true,
        "task_description": "Build real-time notification system with WebSockets",
        "objective": "Bidirectional WebSocket communication with React frontend",
        "reasoning": "To implement a real-time notification system with WebSockets, we need to break down the task into smaller, manageable subtasks. First, we need to design the WebSocket communication protocol and data format. Then, we need to implement the WebSocket server-side logic to handle connections, message routing, and broadcasting. Next, we need to implement the client-side logic in React to establish a WebSocket connection, send messages, and handle incoming notifications. After that, we need to test the WebSocket communication to ensure it is working correctly. Finally, we need to integrate the notification system with the existing application and deploy it to production.",
        "subtasks": "[\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"design\",\n    \"description\": \"Design WebSocket communication protocol and data format (JSON schema)\",\n    \"dependencies\": [],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement WebSocket server-side logic (Node.js/Express) for connection management and message routing\",\n    \"dependencies\": [\n      \"Design WebSocket communication protocol and data format (JSON schema)\"\n    ],\n    \"estimated_minutes\": 60\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement React client-side logic for WebSocket connection, sending messages, and handling notifications\",\n    \"dependencies\": [\n      \"Design WebSocket communication protocol and data format (JSON schema)\"\n    ],\n    \"estimated_minutes\": 50\n  },\n  {\n    \"princess\": \"princess-quality\",\n    \"task_type\": \"test\",\n    \"description\": \"Test WebSocket communication (bidirectional messaging, error handling, reconnection)\",\n    \"dependencies\": [\n      \"Implement WebSocket server-side logic (Node.js/Express) for connection management and message routing\",\n      \"Implement React client-side logic for WebSocket connection, sending messages, and handling notifications\"\n    ],\n    \"estimated_minutes\": 40\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Integrate notification system with existing application (trigger notifications from backend events)\",\n    \"dependencies\": [\n      \"Test WebSocket communication (bidirectional messaging, error handling, reconnection)\"\n    ],\n    \"estimated_minutes\": 55\n  },\n    {\n    \"princess\": \"princess-coordination\",\n    \"task_type\": \"deploy\",\n    \"description\": \"Deploy WebSocket server and React application to production environment\",\n    \"dependencies\": [\n      \"Integrate notification system with existing application (trigger notifications from backend events)\"\n    ],\n    \"estimated_minutes\": 30\n  }\n]"
      },
      {
        "augmented": true,
        "task_description": "Build API gateway with rate limiting and authentication",
        "objective": "Centralized gateway using Kong or Express Gateway",
        "reasoning": "The task is to build an API gateway with rate limiting and authentication. This requires several steps: designing the gateway architecture, implementing the core gateway functionality, configuring rate limiting and authentication plugins, testing the gateway, and reviewing the configuration for security and performance.",
        "subtasks": "[\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"design\",\n    \"description\": \"Design API gateway architecture and routing rules\",\n    \"dependencies\": [],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement core gateway functionality with Kong or Express Gateway\",\n    \"dependencies\": [\n      \"design\"\n    ],\n    \"estimated_minutes\": 60\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Configure rate limiting plugin based on IP or user ID\",\n    \"dependencies\": [\n      \"code\"\n    ],\n    \"estimated_minutes\": 40\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement authentication plugin with JWT or OAuth2\",\n    \"dependencies\": [\n      \"code\"\n    ],\n    \"estimated_minutes\": 50\n  },\n  {\n    \"princess\": \"princess-quality\",\n    \"task_type\": \"test\",\n    \"description\": \"Test API gateway routing, rate limiting, and authentication\",\n    \"dependencies\": [\n      \"code\"\n    ],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"review\",\n    \"description\": \"Security review for API gateway configuration and plugins\",\n    \"dependencies\": [\n      \"test\"\n    ],\n    \"estimated_minutes\": 30\n  }\n]"
      },
      {
        "augmented": true,
        "task_description": "Implement OAuth2 social login (Google, GitHub, Facebook)",
        "objective": "Multi-provider authentication with Passport.js",
        "reasoning": "The task is to implement OAuth2 social login using Passport.js for Google, GitHub, and Facebook. This requires several steps: designing the authentication flow, configuring Passport.js strategies for each provider, implementing the necessary API endpoints, handling user data, and testing the integration. Each provider needs its own configuration and testing.",
        "subtasks": "[\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"design\",\n    \"description\": \"Design OAuth2 flow and user data mapping strategy for social logins.\",\n    \"dependencies\": [],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Configure Passport.js Google strategy and implement callback route.\",\n    \"dependencies\": [\"design\"],\n    \"estimated_minutes\": 50\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Configure Passport.js GitHub strategy and implement callback route.\",\n    \"dependencies\": [\"design\"],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Configure Passport.js Facebook strategy and implement callback route.\",\n    \"dependencies\": [\"design\"],\n    \"estimated_minutes\": 50\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement API endpoints for initiating social login and handling callbacks.\",\n    \"dependencies\": [\"code\"],\n    \"estimated_minutes\": 40\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"code\",\n    \"description\": \"Implement user data handling and account linking logic.\",\n    \"dependencies\": [\"code\"],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"debug\",\n    \"description\": \"Test Google login flow and data retrieval.\",\n    \"dependencies\": [\"code\"],\n    \"estimated_minutes\": 30\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"debug\",\n    \"description\": \"Test GitHub login flow and data retrieval.\",\n    \"dependencies\": [\"code\"],\n    \"estimated_minutes\": 30\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"debug\",\n    \"description\": \"Test Facebook login flow and data retrieval.\",\n    \"dependencies\": [\"code\"],\n    \"estimated_minutes\": 30\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"review\",\n    \"description\": \"Security review for OAuth2 configuration and data handling.\",\n    \"dependencies\": [\"debug\"],\n    \"estimated_minutes\": 35\n  }\n]"
      },
      {
        "augmented": true,
        "task_description": "Implement OAuth2 authorization server",
        "objective": "Custom OAuth2 server with PKCE and refresh tokens",
        "reasoning": "The task is to implement a custom OAuth2 authorization server. This requires designing the authorization flow, implementing the server-side logic for handling authorization requests, issuing tokens, and managing refresh tokens. PKCE support needs to be added for enhanced security. The subtasks are broken down into design, coding, testing, and review stages, with dependencies to ensure proper sequencing.",
        "subtasks": "[{\"princess\": \"princess-dev\", \"task_type\": \"design\", \"description\": \"Design OAuth2 authorization flow with PKCE and refresh tokens\", \"dependencies\": [], \"estimated_minutes\": 45}, {\"princess\": \"princess-dev\", \"task_type\": \"code\", \"description\": \"Implement authorization endpoint and token issuance\", \"dependencies\": [\"design\"], \"estimated_minutes\": 60}, {\"princess\": \"princess-dev\", \"task_type\": \"code\", \"description\": \"Implement refresh token rotation and revocation\", \"dependencies\": [\"design\"], \"estimated_minutes\": 50}, {\"princess\": \"princess-dev\", \"task_type\": \"code\", \"description\": \"Implement client registration and management\", \"dependencies\": [\"design\"], \"estimated_minutes\": 40}, {\"princess\": \"princess-quality\", \"task_type\": \"test\", \"description\": \"Write integration tests for authorization and token endpoints\", \"dependencies\": [\"code\"], \"estimated_minutes\": 45}, {\"princess\": \"princess-quality\", \"task_type\": \"test\", \"description\": \"Write security tests for PKCE and token handling\", \"dependencies\": [\"code\"], \"estimated_minutes\": 40}, {\"princess\": \"princess-dev\", \"task_type\": \"debug\", \"description\": \"Debug authorization flow and token handling\", \"dependencies\": [\"test\"], \"estimated_minutes\": 30}, {\"princess\": \"princess-dev\", \"task_type\": \"review\", \"description\": \"Security review of OAuth2 implementation\", \"dependencies\": [\"debug\"], \"estimated_minutes\": 35}]"
      }
    ],
    "signature": {
      "instructions": "Decompose complex task into princess-level subtasks.\n\nYou are an expert Queen agent coordinating Princess agents.\nYour role is to break down complex objectives into actionable\nprincess-level subtasks that can be executed by the three\nprincess hives: Development, Quality, and Coordination.\n\nEach subtask must have:\n- Clear princess assignment (princess-dev, princess-quality, princess-coordination)\n- Specific task type matching princess capabilities\n- Realistic time estimate (15-60 minutes)\n- Valid dependencies (no circular references)\n- Concrete, measurable description\n\nFollow the 26 prompt engineering principles:\n- Clarity: Use precise, unambiguous language\n- Reasoning: Show step-by-step decomposition logic\n- Constraints: Respect NASA Rule 10 (≤60 LOC functions)\n- Structure: Output valid JSON format",
      "fields": [
        {
          "prefix": "Task Description:",
          "description": "Complex task requiring decomposition into subtasks"
        },
        {
          "prefix": "Objective:",
          "description": "Success criteria and constraints for the overall task"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "Step-by-step decomposition reasoning explaining why each subtask is needed"
        },
        {
          "prefix": "Subtasks:",
          "description": "Ordered list of princess-level subtasks as JSON array. Each subtask must have: {'princess': str, 'task_type': str, 'description': str, 'dependencies': list[str], 'estimated_minutes': int}"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.0"
    }
  }
}
