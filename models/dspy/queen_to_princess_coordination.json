{
  "decompose.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "task_description": "Design CI/CD pipeline for 50-service microservices platform",
        "objective": "10-minute build-to-deploy with automated testing",
        "reasoning": "1. First, we need architectural planning to establish pipeline stages and workflows\n2. Development tasks focus on implementing core pipeline components\n3. Quality tasks ensure testing coverage and validation\n4. Coordination tasks handle deployment orchestration\n5. Breaking into smaller subtasks ensures maintainable implementation\n6. Dependencies structured to allow parallel work where possible\n7. Time estimates account for complexity while staying actionable",
        "subtasks": "[\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"plan\",\n        \"description\": \"Design pipeline architecture and stage definitions\",\n        \"dependencies\": [],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"implement\",\n        \"description\": \"Create build automation scripts for service templates\",\n        \"dependencies\": [\"Design pipeline architecture and stage definitions\"],\n        \"estimated_minutes\": 30\n    },\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"test-design\",\n        \"description\": \"Define test coverage requirements and validation gates\",\n        \"dependencies\": [\"Design pipeline architecture and stage definitions\"],\n        \"estimated_minutes\": 25\n    },\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"implement\",\n        \"description\": \"Implement parallel build orchestration\",\n        \"dependencies\": [\"Create build automation scripts for service templates\"],\n        \"estimated_minutes\": 40\n    },\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"test-implement\",\n        \"description\": \"Create automated test suites for pipeline stages\",\n        \"dependencies\": [\"Define test coverage requirements and validation gates\"],\n        \"estimated_minutes\": 35\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"orchestrate\",\n        \"description\": \"Configure deployment coordination and rollback procedures\",\n        \"dependencies\": [\"Implement parallel build orchestration\", \"Create automated test suites for pipeline stages\"],\n        \"estimated_minutes\": 50\n    }\n]"
      },
      {
        "augmented": true,
        "task_description": "Coordinate machine learning model deployment pipeline",
        "objective": "Deploy 5 new models with A/B testing and performance tracking",
        "reasoning": "1. First, we need to design the model deployment architecture and A/B testing framework\n2. Then calculate infrastructure costs for model serving and monitoring\n3. Next, implement the deployment pipeline with monitoring\n4. Quality checks are needed for model validation and testing\n5. Finally, coordinate the actual deployment with performance tracking\nThis decomposition ensures proper planning, cost control, and execution while maintaining quality standards.",
        "subtasks": "[\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"plan\",\n        \"description\": \"Design model deployment architecture and A/B testing framework\",\n        \"dependencies\": [],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"track-cost\",\n        \"description\": \"Calculate infrastructure costs for model serving and monitoring\",\n        \"dependencies\": [\"plan\"],\n        \"estimated_minutes\": 25\n    },\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"implement\",\n        \"description\": \"Build model deployment pipeline with monitoring instrumentation\",\n        \"dependencies\": [\"plan\"],\n        \"estimated_minutes\": 50\n    },\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"test\",\n        \"description\": \"Validate model performance metrics and A/B testing setup\",\n        \"dependencies\": [\"implement\"],\n        \"estimated_minutes\": 35\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"orchestrate\",\n        \"description\": \"Execute staged model deployment with performance tracking\",\n        \"dependencies\": [\"test\", \"track-cost\"],\n        \"estimated_minutes\": 40\n    }\n]"
      },
      {
        "augmented": true,
        "task_description": "Establish automated backup validation and recovery testing",
        "objective": "Verify backup integrity monthly with automated restore tests",
        "reasoning": "Let's break this down systematically:\n1. First, we need a coordination plan for the backup validation framework\n2. Then development needs to create automated scripts for backup verification\n3. Quality needs to define test scenarios and success criteria\n4. Finally, coordination needs to orchestrate the automated testing schedule\n\nThe dependencies flow from planning -> development -> testing -> deployment.\nEach subtask is sized to be completable within 60 minutes per NASA Rule 10.",
        "subtasks": "[\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"plan\",\n        \"description\": \"Design backup validation framework and recovery test scenarios\",\n        \"dependencies\": [],\n        \"estimated_minutes\": 30\n    },\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"code\",\n        \"description\": \"Implement automated backup verification scripts\",\n        \"dependencies\": [\"Design backup validation framework and recovery test scenarios\"],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"test\",\n        \"description\": \"Define and implement backup restore test cases\",\n        \"dependencies\": [\"Implement automated backup verification scripts\"],\n        \"estimated_minutes\": 40\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"orchestrate\",\n        \"description\": \"Set up monthly automated backup testing schedule\",\n        \"dependencies\": [\"Define and implement backup restore test cases\"],\n        \"estimated_minutes\": 25\n    }\n]"
      },
      {
        "augmented": true,
        "task_description": "Optimize database query performance for high-traffic endpoints",
        "objective": "Reduce p95 query time from 800ms to <100ms",
        "reasoning": "To optimize database query performance effectively, we need a systematic approach:\n\n1. First, we need to analyze current query patterns and identify bottlenecks\n2. Index optimization is crucial for query performance\n3. Query rewriting may be necessary for better execution plans\n4. Testing and validation must be thorough to ensure improvements\n5. Implementation needs careful coordination to avoid service disruption\n\nThe task requires both development and quality expertise, with coordination for deployment.",
        "subtasks": "[\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"analyze\",\n        \"description\": \"Profile slow queries and identify optimization opportunities using EXPLAIN ANALYZE\",\n        \"dependencies\": [],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"optimize\",\n        \"description\": \"Design and create optimal database indexes for high-traffic queries\",\n        \"dependencies\": [\"analyze\"],\n        \"estimated_minutes\": 30\n    },\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"refactor\",\n        \"description\": \"Rewrite problematic queries for better execution plans\",\n        \"dependencies\": [\"optimize\"],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"test-performance\",\n        \"description\": \"Conduct load testing to verify query optimization improvements\",\n        \"dependencies\": [\"refactor\"],\n        \"estimated_minutes\": 30\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"orchestrate\",\n        \"description\": \"Deploy optimizations to production with rollback plan\",\n        \"dependencies\": [\"test-performance\"],\n        \"estimated_minutes\": 25\n    }\n]"
      },
      {
        "augmented": true,
        "task_description": "Optimize Elasticsearch cluster for cost and performance",
        "objective": "Reduce node count from 12 to 6 while maintaining query performance",
        "reasoning": "1. First, we need to analyze current cluster performance and resource utilization to identify optimization opportunities\n2. Next, evaluate index patterns and shard allocation to optimize storage distribution\n3. Then, review and adjust query patterns and caching strategies\n4. Finally, implement and validate the optimized configuration\nThis sequence ensures we maintain performance while reducing infrastructure costs.",
        "subtasks": "[\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"analyze\",\n        \"description\": \"Analyze cluster metrics, resource usage, and query patterns\",\n        \"dependencies\": [],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"optimize\",\n        \"description\": \"Optimize index templates and shard allocation strategy\",\n        \"dependencies\": [\"analyze\"],\n        \"estimated_minutes\": 30\n    },\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"implement\",\n        \"description\": \"Implement query optimization and caching improvements\",\n        \"dependencies\": [\"analyze\"],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"orchestrate\",\n        \"description\": \"Coordinate cluster rebalancing and node reduction\",\n        \"dependencies\": [\"optimize\", \"implement\"],\n        \"estimated_minutes\": 30\n    },\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"validate\",\n        \"description\": \"Validate cluster performance and resource metrics post-optimization\",\n        \"dependencies\": [\"orchestrate\"],\n        \"estimated_minutes\": 35\n    }\n]"
      },
      {
        "augmented": true,
        "task_description": "Design authentication and authorization architecture",
        "objective": "OAuth2/OIDC with RBAC and <50ms token validation",
        "reasoning": "Let's break this down systematically:\n1. First, we need architectural design of the auth flow and RBAC model\n2. Then security assessment and compliance validation\n3. Implementation planning for token handling and validation\n4. Performance optimization for token validation latency\n5. Finally, deployment and monitoring setup\n\nThe subtasks need to cover:\n- Initial architecture and security design\n- Token validation performance optimization\n- RBAC model implementation\n- Monitoring and alerting setup\n- Integration testing and validation",
        "subtasks": "[\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"plan\",\n        \"description\": \"Design OAuth2/OIDC flow and RBAC permission model\",\n        \"dependencies\": [],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"security-review\",\n        \"description\": \"Perform security assessment of auth architecture\",\n        \"dependencies\": [\"Design OAuth2/OIDC flow and RBAC permission model\"],\n        \"estimated_minutes\": 30\n    },\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"optimize\",\n        \"description\": \"Implement token validation caching strategy for <50ms latency\",\n        \"dependencies\": [\"Design OAuth2/OIDC flow and RBAC permission model\"],\n        \"estimated_minutes\": 40\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"orchestrate\",\n        \"description\": \"Set up auth monitoring and alert thresholds\",\n        \"dependencies\": [\"Implement token validation caching strategy for <50ms latency\"],\n        \"estimated_minutes\": 25\n    }\n]"
      },
      {
        "augmented": true,
        "task_description": "Implement database read replica strategy for query distribution",
        "objective": "Offload 80% of read traffic to replicas to improve primary performance",
        "reasoning": "1. First, we need to analyze current read patterns and query distribution to establish baseline metrics\n2. Then design the replica architecture considering factors like:\n   - Number of replicas needed\n   - Geographic distribution\n   - Replication lag tolerance\n   - Query routing logic\n3. Next, implement the infrastructure changes with monitoring\n4. Finally, validate the performance improvements and traffic distribution",
        "subtasks": "[\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"analyze\",\n    \"description\": \"Profile current database read patterns and query types\",\n    \"dependencies\": [],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-coordination\",\n    \"task_type\": \"plan\",\n    \"description\": \"Design replica architecture and query routing strategy\",\n    \"dependencies\": [\"analyze\"],\n    \"estimated_minutes\": 30\n  },\n  {\n    \"princess\": \"princess-dev\",\n    \"task_type\": \"implement\",\n    \"description\": \"Deploy read replicas with monitoring configuration\",\n    \"dependencies\": [\"plan\"],\n    \"estimated_minutes\": 45\n  },\n  {\n    \"princess\": \"princess-quality\",\n    \"task_type\": \"test\",\n    \"description\": \"Validate query performance and traffic distribution\",\n    \"dependencies\": [\"implement\"],\n    \"estimated_minutes\": 35\n  }\n]"
      },
      {
        "augmented": true,
        "task_description": "Plan API versioning and deprecation strategy",
        "objective": "Backward compatibility with 6-month migration window",
        "reasoning": "Let's break this down systematically:\n\n1. First, we need a comprehensive plan for API versioning that includes:\n   - Version numbering scheme\n   - Documentation standards\n   - Backward compatibility requirements\n\n2. Next, we need quality assurance to:\n   - Validate version compatibility\n   - Test migration paths\n   - Verify documentation accuracy\n\n3. Finally, we need coordination to:\n   - Manage deprecation timelines\n   - Monitor client migrations\n   - Handle communication strategy",
        "subtasks": "[\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"design\",\n        \"description\": \"Design version numbering scheme and compatibility rules\",\n        \"dependencies\": [],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"test-plan\",\n        \"description\": \"Create version compatibility test suite and migration validation\",\n        \"dependencies\": [\"Design version numbering scheme and compatibility rules\"],\n        \"estimated_minutes\": 30\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"plan\",\n        \"description\": \"Develop deprecation timeline and client migration strategy\",\n        \"dependencies\": [\"Design version numbering scheme and compatibility rules\"],\n        \"estimated_minutes\": 40\n    }\n]"
      },
      {
        "augmented": true,
        "task_description": "Architect machine learning model serving platform",
        "objective": "Deploy 50 models with A/B testing and <100ms inference",
        "reasoning": "Let's break this down systematically:\n1. First, we need architectural planning for model serving infrastructure that can handle 50 models\n2. Cost analysis is crucial for ML infrastructure which can be resource-intensive\n3. Implementation needs to consider both performance and testing requirements\n4. Quality validation is essential for model serving accuracy\n5. Coordination is needed for deployment and monitoring",
        "subtasks": "[\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"plan\",\n        \"description\": \"Design model serving architecture with A/B testing framework\",\n        \"dependencies\": [],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"track-cost\",\n        \"description\": \"Calculate infrastructure costs for serving 50 models\",\n        \"dependencies\": [\"plan\"],\n        \"estimated_minutes\": 25\n    },\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"implement\",\n        \"description\": \"Build model serving API with latency optimization\",\n        \"dependencies\": [\"plan\"],\n        \"estimated_minutes\": 50\n    },\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"test\",\n        \"description\": \"Validate model serving latency and accuracy metrics\",\n        \"dependencies\": [\"implement\"],\n        \"estimated_minutes\": 35\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"orchestrate\",\n        \"description\": \"Deploy model serving platform with monitoring\",\n        \"dependencies\": [\"test\", \"track-cost\"],\n        \"estimated_minutes\": 40\n    }\n]"
      },
      {
        "augmented": true,
        "task_description": "Plan database backup and recovery strategy",
        "objective": "Continuous backups with point-in-time recovery",
        "reasoning": "Let's break this down systematically:\n\n1. First, we need a development princess to analyze current database architecture and implement backup mechanisms\n2. Then, quality princess needs to verify backup integrity and recovery procedures\n3. Finally, coordination princess needs to establish monitoring and scheduling\n\nThe task requires multiple specialized skills:\n- Technical implementation of backup systems\n- Testing and validation procedures\n- Operational coordination and monitoring\n- Cost analysis and resource planning\n\nBreaking it into princess-level subtasks ensures:\n- Clear ownership and responsibilities\n- Manageable time chunks\n- Proper sequencing of dependencies\n- Comprehensive coverage of requirements",
        "subtasks": "[\n    {\n        \"princess\": \"princess-dev\",\n        \"task_type\": \"implement\",\n        \"description\": \"Configure continuous backup mechanism with WAL archiving\",\n        \"dependencies\": [],\n        \"estimated_minutes\": 45\n    },\n    {\n        \"princess\": \"princess-quality\",\n        \"task_type\": \"test\",\n        \"description\": \"Validate point-in-time recovery procedures and success criteria\",\n        \"dependencies\": [\"Configure continuous backup mechanism with WAL archiving\"],\n        \"estimated_minutes\": 30\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"monitor\",\n        \"description\": \"Set up backup monitoring and alerting system\",\n        \"dependencies\": [\"Validate point-in-time recovery procedures and success criteria\"],\n        \"estimated_minutes\": 25\n    },\n    {\n        \"princess\": \"princess-coordination\",\n        \"task_type\": \"track-cost\",\n        \"description\": \"Calculate backup storage costs and retention policy impact\",\n        \"dependencies\": [\"Set up backup monitoring and alerting system\"],\n        \"estimated_minutes\": 20\n    }\n]"
      }
    ],
    "signature": {
      "instructions": "Decompose complex task into princess-level subtasks.\n\nYou are an expert Queen agent coordinating Princess agents.\nYour role is to break down complex objectives into actionable\nprincess-level subtasks that can be executed by the three\nprincess hives: Development, Quality, and Coordination.\n\nEach subtask must have:\n- Clear princess assignment (princess-dev, princess-quality, princess-coordination)\n- Specific task type matching princess capabilities\n- Realistic time estimate (15-60 minutes)\n- Valid dependencies (no circular references)\n- Concrete, measurable description\n\nFollow the 26 prompt engineering principles:\n- Clarity: Use precise, unambiguous language\n- Reasoning: Show step-by-step decomposition logic\n- Constraints: Respect NASA Rule 10 (≤60 LOC functions)\n- Structure: Output valid JSON format",
      "fields": [
        {
          "prefix": "Task Description:",
          "description": "Complex task requiring decomposition into subtasks"
        },
        {
          "prefix": "Objective:",
          "description": "Success criteria and constraints for the overall task"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "Step-by-step decomposition reasoning explaining why each subtask is needed"
        },
        {
          "prefix": "Subtasks:",
          "description": "Ordered list of princess-level subtasks as JSON array. Each subtask must have: {'princess': str, 'task_type': str, 'description': str, 'dependencies': list[str], 'estimated_minutes': int}"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.0"
    }
  }
}
