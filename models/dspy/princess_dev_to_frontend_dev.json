{
  "delegate.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "phase": "implement-component",
        "context": "{\"previous_phase\": \"design\", \"component_spec\": \"User profile card with avatar, name, bio, and follow button\", \"design_system\": \"Material UI v5\", \"state_management\": \"React Context + Hooks\"}",
        "reasoning": "For implementing a user profile card component, I'll assign this to a frontend-dev drone since it involves UI component development with Material UI. The task requires integration of various Material UI components, state management through React Context, and implementing user interactions. The drone will need to ensure responsive design, accessibility compliance, and proper state handling for the follow button functionality.",
        "drone_task": "{\n    \"drone_id\": \"frontend-dev\",\n    \"task_type\": \"implement-component\",\n    \"description\": \"Create a reusable user profile card component using Material UI v5\",\n    \"payload\": {\n        \"features\": [\n            \"Avatar display with fallback\",\n            \"Name with typography variants\",\n            \"Bio text with ellipsis\",\n            \"Follow button with state\",\n            \"Responsive layout\"\n        ],\n        \"components\": {\n            \"material_ui\": [\n                \"Card\",\n                \"Avatar\",\n                \"Typography\",\n                \"Button\",\n                \"Box\"\n            ]\n        },\n        \"state_management\": {\n            \"context\": \"UserContext for follow state\",\n            \"hooks\": [\"useState\", \"useContext\"]\n        },\n        \"styling\": {\n            \"theme\": \"Material UI theme customization\",\n            \"spacing\": \"consistent padding/margins\",\n            \"responsive\": \"xs, sm, md breakpoints\"\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Component renders without errors\",\n        \"Avatar displays user image or fallback initials\",\n        \"Follow button toggles state correctly\",\n        \"Bio text truncates with ellipsis if too long\",\n        \"Responsive on mobile devices\",\n        \"Meets accessibility standards\",\n        \"Proper PropTypes documentation\",\n        \"Unit tests for component logic\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "implement-form",
        "context": "{\"previous_phase\": \"design\", \"component_spec\": \"Multi-step registration form with validation\", \"design_system\": \"Custom Tailwind\", \"state_management\": \"React Hook Form + Zod\"}",
        "reasoning": "For implementing a multi-step registration form with validation, I'll assign this to our frontend-dev drone who specializes in form implementations. The task requires careful attention to form state management, validation logic, and user experience across steps. The drone will need to integrate React Hook Form with Zod for type-safe validation while maintaining a smooth multi-step flow.",
        "drone_task": "{\n  \"drone_id\": \"frontend-dev\",\n  \"task_type\": \"implement-form\",\n  \"description\": \"Create multi-step registration form with validation and progress tracking\",\n  \"payload\": {\n    \"features\": [\n      \"step navigation\",\n      \"field validation\",\n      \"progress indicator\",\n      \"form persistence\",\n      \"error handling\"\n    ],\n    \"form_steps\": [\n      \"personal info\",\n      \"contact details\",\n      \"account setup\",\n      \"preferences\"\n    ],\n    \"validation\": {\n      \"library\": \"Zod\",\n      \"features\": [\n        \"real-time validation\",\n        \"custom error messages\",\n        \"field dependencies\"\n      ]\n    },\n    \"state_management\": {\n      \"library\": \"React Hook Form\",\n      \"features\": [\n        \"form state\",\n        \"step tracking\",\n        \"validation state\"\n      ]\n    },\n    \"styling\": \"Tailwind CSS with custom components\",\n    \"accessibility\": \"ARIA form patterns, keyboard navigation\"\n  },\n  \"acceptance_criteria\": [\n    \"All form fields properly validated with Zod schemas\",\n    \"Multi-step navigation works with state persistence\",\n    \"Progress indicator accurately shows current step\",\n    \"Form submissions handled with proper error states\",\n    \"Responsive layout works on all screen sizes\",\n    \"Keyboard navigation functional between steps\",\n    \"All form states properly managed by React Hook Form\"\n  ]\n}"
      },
      {
        "augmented": true,
        "phase": "implement-data-grid",
        "context": "{\"previous_phase\": \"architecture\", \"component_spec\": \"Data table with sorting, filtering, pagination\", \"design_system\": \"AG Grid React\", \"state_management\": \"React Query for data fetching\"}",
        "reasoning": "For implementing a data grid component with complex functionality, I'll assign this to a frontend-dev drone who specializes in data-heavy UI components. The task requires integration of AG Grid with React Query for data management, along with implementing various grid features. The task needs clear acceptance criteria around performance, accessibility, and functionality.",
        "drone_task": "{\n    \"drone_id\": \"frontend-dev\",\n    \"task_type\": \"implement-data-grid\",\n    \"description\": \"Create a feature-rich data grid component using AG Grid with sorting, filtering, and pagination capabilities\",\n    \"payload\": {\n        \"features\": [\n            \"column sorting\",\n            \"filter panel\",\n            \"server-side pagination\",\n            \"column resizing\",\n            \"column reordering\",\n            \"row selection\",\n            \"export to CSV\"\n        ],\n        \"technical_requirements\": {\n            \"grid_library\": \"AG Grid React Enterprise\",\n            \"data_management\": \"React Query for server-side operations\",\n            \"performance\": \"virtualization for large datasets\",\n            \"state_persistence\": \"save column state and filters\"\n        },\n        \"styling\": {\n            \"theme\": \"match design system\",\n            \"responsive\": \"horizontal scroll on mobile\",\n            \"custom_cell_renderers\": \"for specific column types\"\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Grid loads initial data within 500ms\",\n        \"Sorting updates are reflected immediately\",\n        \"Filters correctly query backend API\",\n        \"Pagination works with server-side data\",\n        \"Column state persists across sessions\",\n        \"Keyboard navigation follows ARIA grid pattern\",\n        \"Export functionality works for all data formats\",\n        \"Responsive design adapts to screen sizes\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "implement-modal",
        "context": "{\"previous_phase\": \"design\", \"component_spec\": \"Confirmation modal with custom actions\", \"design_system\": \"Headless UI + Tailwind\", \"state_management\": \"Local state with context\"}",
        "reasoning": "For implementing a modal component, I'll assign this to a frontend-dev drone since it requires UI implementation skills. The task involves creating a reusable modal component using Headless UI for accessibility and functionality, with Tailwind for styling. The drone will need to implement focus management, keyboard interactions, and ensure proper state management through React context.",
        "drone_task": "{\n  \"drone_id\": \"frontend-dev\",\n  \"task_type\": \"implement-modal\",\n  \"description\": \"Create accessible modal component with Headless UI and Tailwind\",\n  \"payload\": {\n    \"features\": [\n      \"backdrop click dismissal\",\n      \"ESC key closing\",\n      \"focus trap\",\n      \"custom action buttons\",\n      \"animation\"\n    ],\n    \"components\": {\n      \"Modal\": \"container with backdrop\",\n      \"ModalHeader\": \"title with close button\",\n      \"ModalBody\": \"content area\",\n      \"ModalFooter\": \"action buttons\"\n    },\n    \"styling\": {\n      \"backdrop\": \"semi-transparent black overlay\",\n      \"animation\": \"fade-in and slide-up\",\n      \"responsive\": \"proper spacing on mobile\"\n    },\n    \"accessibility\": {\n      \"role\": \"dialog\",\n      \"aria-modal\": \"true\",\n      \"focus-management\": \"trap focus inside modal\"\n    }\n  },\n  \"acceptance_criteria\": [\n    \"Modal opens and closes smoothly with animation\",\n    \"Focus is trapped inside modal when open\",\n    \"ESC key and backdrop click close modal\",\n    \"Screen readers announce modal appropriately\",\n    \"Custom actions work as expected\",\n    \"Responsive on all screen sizes\",\n    \"No scroll on background content when modal open\"\n  ]\n}"
      },
      {
        "augmented": true,
        "phase": "implement-navigation",
        "context": "{\"previous_phase\": \"architecture\", \"component_spec\": \"Responsive sidebar navigation with nested routes\", \"design_system\": \"Custom components\", \"state_management\": \"Zustand for sidebar state\"}",
        "reasoning": "For implementing a responsive sidebar navigation with nested routes, I'll assign this to a frontend-dev drone. The task requires expertise in component architecture, state management with Zustand, and responsive design patterns. The drone will need to create a collapsible sidebar that handles nested route structures while maintaining accessibility and mobile responsiveness. The task will be structured to ensure proper route handling, state persistence, and smooth transitions.",
        "drone_task": "{\n    \"drone_id\": \"frontend-dev\",\n    \"task_type\": \"implement-navigation\",\n    \"description\": \"Create responsive sidebar navigation with nested route support\",\n    \"payload\": {\n        \"features\": [\n            \"collapsible sidebar\",\n            \"nested route structure\",\n            \"mobile responsive drawer\",\n            \"route persistence\",\n            \"breadcrumb integration\"\n        ],\n        \"state_management\": {\n            \"tool\": \"Zustand\",\n            \"states\": [\n                \"sidebar expanded/collapsed\",\n                \"active route\",\n                \"mobile drawer state\"\n            ]\n        },\n        \"components\": [\n            \"Sidebar container\",\n            \"NavItem\",\n            \"NestedNavList\",\n            \"MobileDrawer\",\n            \"CollapseButton\"\n        ],\n        \"responsive_breakpoints\": {\n            \"mobile\": \"< 768px\",\n            \"tablet\": \"768px - 1024px\",\n            \"desktop\": \"> 1024px\"\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Sidebar correctly expands/collapses with animation\",\n        \"Nested routes render with proper indentation\",\n        \"Mobile drawer works smoothly with touch gestures\",\n        \"Active route state persists after page refresh\",\n        \"All navigation items are keyboard accessible\",\n        \"Route changes update breadcrumb trail\",\n        \"Sidebar state persists in Zustand store\",\n        \"Responsive layout works across all breakpoints\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "implement-dashboard",
        "context": "{\"previous_phase\": \"design\", \"component_spec\": \"Analytics dashboard with charts and metrics\", \"design_system\": \"Recharts + Material UI\", \"state_management\": \"React Query + Context\"}",
        "reasoning": "For implementing a complex analytics dashboard, I'll assign this to a frontend-dev drone who specializes in data visualization and component integration. The task requires expertise in both chart implementation and layout management. The drone will need to handle multiple data sources, create responsive layouts, and ensure performance with real-time updates. Given the use of Recharts and Material UI, the drone should focus on component composition and data flow optimization.",
        "drone_task": "{\n    \"drone_id\": \"frontend-dev\",\n    \"task_type\": \"implement-dashboard\",\n    \"description\": \"Create analytics dashboard with interactive charts and metrics panels\",\n    \"payload\": {\n        \"features\": [\n            \"line charts for trends\",\n            \"bar charts for comparisons\",\n            \"pie charts for distribution\",\n            \"metric cards with sparklines\",\n            \"date range selector\",\n            \"real-time updates\"\n        ],\n        \"components\": {\n            \"charts\": \"Recharts library integration\",\n            \"layout\": \"Material UI Grid system\",\n            \"controls\": \"date picker, filters, refresh button\"\n        },\n        \"data_handling\": {\n            \"fetching\": \"React Query with stale-while-revalidate\",\n            \"caching\": \"Query cache for performance\",\n            \"updates\": \"WebSocket for real-time data\"\n        },\n        \"styling\": {\n            \"theme\": \"Material UI theme customization\",\n            \"responsive\": \"grid breakpoints for different screens\",\n            \"animations\": \"smooth transitions for updates\"\n        }\n    },\n    \"acceptance_criteria\": [\n        \"All charts render correctly with sample data\",\n        \"Dashboard layout is responsive across breakpoints\",\n        \"Date range selection updates all relevant charts\",\n        \"Real-time updates work without performance issues\",\n        \"Loading states and error handling implemented\",\n        \"Accessibility features for chart interactions\",\n        \"Charts maintain aspect ratio on resize\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "implement-autocomplete",
        "context": "{\"previous_phase\": \"design\", \"component_spec\": \"Search autocomplete with debouncing\", \"design_system\": \"Downshift + Tailwind\", \"state_management\": \"Local state + React Query\"}",
        "reasoning": "For implementing an autocomplete component with search functionality, I'll assign this to a frontend-dev drone. The task requires expertise in React components, state management, and API integration. The drone will need to implement debounced search, keyboard navigation, and proper accessibility following WAI-ARIA combobox patterns. The task structure includes clear specifications for features, interactions, and acceptance criteria.",
        "drone_task": "{\n    \"drone_id\": \"frontend-dev\",\n    \"task_type\": \"implement-autocomplete\",\n    \"description\": \"Create search autocomplete component with debounced API calls\",\n    \"payload\": {\n        \"features\": [\n            \"debounced search input\",\n            \"dropdown suggestions\",\n            \"keyboard navigation\",\n            \"selection handling\",\n            \"loading states\"\n        ],\n        \"technical_specs\": {\n            \"debounce_ms\": 300,\n            \"min_chars\": 2,\n            \"max_suggestions\": 10,\n            \"keyboard_support\": [\"arrow keys\", \"enter\", \"escape\"],\n            \"styling\": \"Tailwind classes for dropdown and highlights\"\n        },\n        \"dependencies\": [\n            \"Downshift library\",\n            \"search API endpoint\",\n            \"React Query setup\"\n        ],\n        \"estimated_minutes\": 45\n    },\n    \"acceptance_criteria\": [\n        \"Search input debounces API calls correctly\",\n        \"Keyboard navigation works for all interactions\",\n        \"Loading states shown during API calls\",\n        \"Selected items handled properly\",\n        \"Mobile-friendly touch interactions\",\n        \"ARIA attributes implemented correctly\",\n        \"Proper error handling for failed API calls\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "implement-file-upload",
        "context": "{\"previous_phase\": \"architecture\", \"component_spec\": \"Drag-and-drop file uploader with preview\", \"design_system\": \"React Dropzone + custom UI\", \"state_management\": \"Local state with upload progress\"}",
        "reasoning": "For implementing a file upload component with drag-and-drop functionality, I'll assign this to a frontend-dev drone. The task requires integration of React Dropzone library with custom UI components and handling file upload states. The drone will need to implement preview functionality, progress tracking, and error handling while maintaining accessibility standards.",
        "drone_task": "{\n    \"drone_id\": \"frontend-dev\",\n    \"task_type\": \"implement-file-upload\",\n    \"description\": \"Create drag-and-drop file uploader with preview and progress\",\n    \"payload\": {\n        \"features\": [\n            \"drag-and-drop zone\",\n            \"file preview\",\n            \"upload progress\",\n            \"multiple file support\",\n            \"file type validation\",\n            \"error handling\"\n        ],\n        \"library\": \"React Dropzone\",\n        \"ui_components\": [\n            \"drop zone area\",\n            \"file preview grid\",\n            \"progress bar\",\n            \"error messages\"\n        ],\n        \"interactions\": {\n            \"drag_events\": \"highlight on drag over\",\n            \"click_upload\": \"fallback file picker\",\n            \"preview\": \"image thumbnails or file icons\",\n            \"progress\": \"individual file progress bars\"\n        },\n        \"validation\": {\n            \"file_types\": [\"image/*\", \"application/pdf\"],\n            \"max_size\": \"5MB per file\",\n            \"max_files\": 5\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Drag and drop functionality works smoothly\",\n        \"File preview displays correctly for supported formats\",\n        \"Upload progress shows accurately\",\n        \"Error messages appear for invalid files\",\n        \"Keyboard navigation supported for accessibility\",\n        \"Mobile touch events handled properly\",\n        \"ARIA attributes implemented correctly\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "implement-infinite-scroll",
        "context": "{\"previous_phase\": \"design\", \"component_spec\": \"Infinite scroll feed with lazy loading\", \"design_system\": \"Custom components\", \"state_management\": \"React Query infinite queries\"}",
        "reasoning": "For implementing an infinite scroll component with React Query, I'll assign this to a frontend-dev drone. The task requires expertise in:\n1. Intersection Observer API for scroll detection\n2. React Query's useInfiniteQuery for data fetching\n3. Performance optimization for large lists\n4. Loading states and error handling\n\nThe task should be structured to ensure smooth scrolling performance and proper memory management.",
        "drone_task": "{\n    \"drone_id\": \"frontend-dev\",\n    \"task_type\": \"implement-infinite-scroll\",\n    \"description\": \"Create infinite scroll component with React Query integration\",\n    \"payload\": {\n        \"features\": [\n            \"intersection observer for scroll detection\",\n            \"loading states with spinners\",\n            \"error boundary handling\",\n            \"scroll position restoration\"\n        ],\n        \"technical_requirements\": {\n            \"data_fetching\": \"React Query useInfiniteQuery\",\n            \"optimization\": \"windowing for large lists\",\n            \"scroll_detection\": \"IntersectionObserver API\",\n            \"error_handling\": \"retry logic and error states\"\n        },\n        \"performance_targets\": {\n            \"scroll_fps\": \"60fps minimum\",\n            \"memory_usage\": \"optimize for large datasets\",\n            \"initial_load\": \"<200ms\"\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Smooth scrolling without jank\",\n        \"Loading states visible during fetch\",\n        \"Error states handled gracefully\",\n        \"Memory usage stays constant\",\n        \"Scroll position maintained on back navigation\",\n        \"Accessibility standards met\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "implement-toast-notifications",
        "context": "{\"previous_phase\": \"architecture\", \"component_spec\": \"Toast notification system with queue\", \"design_system\": \"React Hot Toast\", \"state_management\": \"Context for notification management\"}",
        "reasoning": "For implementing a toast notification system, I'll assign this to a frontend-dev drone since it requires UI component implementation with state management. The task requires integrating React Hot Toast library while building a custom notification queue system. The drone needs to ensure notifications are accessible, properly styled, and handle multiple concurrent notifications gracefully.",
        "drone_task": "{\n  \"drone_id\": \"frontend-dev\",\n  \"task_type\": \"implement-toast-notifications\",\n  \"description\": \"Create toast notification system with queuing mechanism\",\n  \"payload\": {\n    \"features\": [\n      \"success/error/warning/info variants\",\n      \"auto-dismiss with timer\",\n      \"notification queue\",\n      \"custom positioning\",\n      \"animation effects\"\n    ],\n    \"state_management\": {\n      \"context\": \"NotificationContext\",\n      \"actions\": [\"show\", \"hide\", \"clearAll\"]\n    },\n    \"styling\": {\n      \"variants\": \"color-coded by type\",\n      \"animation\": \"slide + fade\",\n      \"positioning\": \"top-right stack\"\n    },\n    \"interactions\": {\n      \"dismiss\": \"click or timeout\",\n      \"pause\": \"hover stops timer\"\n    }\n  },\n  \"acceptance_criteria\": [\n    \"Toast notifications appear and dismiss smoothly\",\n    \"Multiple notifications stack correctly\",\n    \"All variants render with proper styling\",\n    \"Screen reader announces notifications\",\n    \"Hover pauses auto-dismiss timer\",\n    \"Queue handles rapid notifications properly\",\n    \"Context API integration works across app\"\n  ]\n}"
      }
    ],
    "signature": {
      "instructions": "Delegate task to drone agent with clear instructions.\n\nYou are a Princess agent coordinating your specialized drone hive.\nYour role is to take high-level workflow phases and convert them\ninto specific, actionable tasks for your drone agents.\n\nPrincess-Dev drones: coder, reviewer, debugger, integration-engineer\nPrincess-Quality drones: tester, nasa-enforcer, theater-detector, fsm-analyzer\nPrincess-Coordination drones: orchestrator, planner, cost-tracker\n\nEach drone task must have:\n- Specific drone agent assignment\n- Task type matching drone capabilities\n- Clear context from previous phases\n- Concrete deliverables\n- Quality gates/acceptance criteria\n\nFollow the 26 prompt engineering principles:\n- Clarity: Unambiguous instructions\n- Context: Include relevant phase results\n- Constraints: Respect drone capabilities\n- Structure: Output valid JSON format",
      "fields": [
        {
          "prefix": "Phase:",
          "description": "Development phase to execute (design, code, test, review, etc.)"
        },
        {
          "prefix": "Context:",
          "description": "Context and results from previous phases that this phase depends on"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "Delegation reasoning explaining drone selection and task structure"
        },
        {
          "prefix": "Drone Task:",
          "description": "Structured task for drone agent as JSON object. Must have: {'drone_id': str, 'task_type': str, 'description': str, 'payload': dict, 'acceptance_criteria': list[str]}"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.0"
    }
  }
}
