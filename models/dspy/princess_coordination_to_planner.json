{
  "delegate.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "phase": "plan",
        "context": "{\"feature_request\": \"Implement OAuth2 authentication\", \"constraints\": {\"deadline\": \"2 weeks\", \"team_size\": 3, \"budget\": \"$500\"}, \"requirements\": {\"security\": \"high\", \"scalability\": \"medium\", \"documentation\": \"required\"}}",
        "reasoning": "For implementing OAuth2 authentication, I'll assign the planner drone to create a comprehensive implementation plan. This requires careful coordination of security, scalability, and documentation aspects. The planner drone is best suited due to:\n1. Security-critical nature requiring detailed phase planning\n2. Multiple team members needing coordination\n3. Complex dependencies between authentication flows\n4. Need for clear documentation milestones\n5. Budget and timeline constraints requiring efficient resource allocation",
        "drone_task": "{\n    \"drone_id\": \"planner\",\n    \"task_type\": \"create-implementation-plan\",\n    \"description\": \"Plan OAuth2 authentication implementation\",\n    \"payload\": {\n        \"deliverables\": [\n            \"OAuth2 service\",\n            \"Security documentation\",\n            \"Integration guide\",\n            \"Test suite\"\n        ],\n        \"phases\": [\n            {\n                \"name\": \"security-design\",\n                \"duration\": \"3 days\",\n                \"agents\": [\"architect\"]\n            },\n            {\n                \"name\": \"implementation\",\n                \"duration\": \"6 days\",\n                \"agents\": [\"coder\"]\n            },\n            {\n                \"name\": \"security-review\",\n                \"duration\": \"2 days\",\n                \"agents\": [\"reviewer\"]\n            },\n            {\n                \"name\": \"testing\",\n                \"duration\": \"3 days\",\n                \"agents\": [\"tester\"]\n            }\n        ],\n        \"resource_allocation\": {\n            \"architect\": \"24h\",\n            \"coder\": \"48h\",\n            \"reviewer\": \"16h\",\n            \"tester\": \"24h\"\n        },\n        \"dependencies\": [\n            \"security-design→implementation\",\n            \"implementation→security-review\",\n            \"security-review→testing\"\n        ],\n        \"risk_factors\": [\n            \"security vulnerabilities\",\n            \"token management\",\n            \"session handling\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Security design reviewed and approved\",\n        \"All OAuth2 flows implemented and tested\",\n        \"Documentation meets security standards\",\n        \"Performance tests show acceptable scalability\",\n        \"Integration guide validated with sample code\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "plan",
        "context": "{\"feature_request\": \"Add real-time notifications\", \"constraints\": {\"deadline\": \"1 week\", \"team_size\": 2, \"budget\": \"$300\"}, \"requirements\": {\"latency\": \"<1s\", \"reliability\": \"99.9%\", \"scalability\": \"10k concurrent users\"}}",
        "reasoning": "For a real-time notifications system with strict latency and reliability requirements, I'll assign this to the planner drone to create a comprehensive implementation plan. The plan needs to focus on:\n1. WebSocket/SSE infrastructure for real-time delivery\n2. Message queuing for reliability\n3. Load testing for scalability verification\n4. Monitoring for latency tracking\n\nThe planner drone is best suited due to its expertise in:\n- Resource allocation optimization\n- Technical dependency mapping\n- Risk assessment\n- Quality gates definition",
        "drone_task": "{\n    \"drone_id\": \"planner\",\n    \"task_type\": \"create-implementation-plan\",\n    \"description\": \"Plan real-time notification system implementation\",\n    \"payload\": {\n        \"deliverables\": [\n            \"Notification service\",\n            \"WebSocket server\",\n            \"Client SDK\",\n            \"Monitoring dashboard\"\n        ],\n        \"phases\": [\n            {\"name\": \"design\", \"duration\": \"1 day\", \"agents\": [\"architect\"]},\n            {\"name\": \"infrastructure\", \"duration\": \"2 days\", \"agents\": [\"devops\"]},\n            {\"name\": \"implement\", \"duration\": \"2 days\", \"agents\": [\"coder\"]},\n            {\"name\": \"test\", \"duration\": \"2 days\", \"agents\": [\"tester\"]}\n        ],\n        \"resource_allocation\": {\n            \"architect\": \"8h\",\n            \"devops\": \"16h\",\n            \"coder\": \"16h\",\n            \"tester\": \"16h\"\n        },\n        \"dependencies\": [\n            \"design→infrastructure\",\n            \"infrastructure→implement\",\n            \"implement→test\"\n        ],\n        \"risk_factors\": [\n            \"websocket scaling\",\n            \"message delivery guarantees\",\n            \"connection management\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Latency under 1 second verified\",\n        \"99.9% reliability demonstrated\",\n        \"10k concurrent users load tested\",\n        \"Monitoring in place\",\n        \"Resource estimates within budget\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "plan",
        "context": "{\"feature_request\": \"Refactor legacy authentication module\", \"constraints\": {\"deadline\": \"3 weeks\", \"team_size\": 4, \"budget\": \"$800\"}, \"requirements\": {\"backward_compatibility\": \"required\", \"zero_downtime\": \"required\", \"test_coverage\": \">=90%\"}}",
        "reasoning": "For this complex authentication refactoring project, I'll assign the planner drone to create a comprehensive implementation plan. The task requires careful coordination due to:\n1. High-risk nature of authentication changes\n2. Strict backward compatibility requirement\n3. Zero downtime deployment necessity\n4. High test coverage demands\n\nThe planner drone will need to create a phased approach that includes:\n- Parallel systems during transition\n- Comprehensive testing strategy\n- Rollback procedures\n- Monitoring implementation",
        "drone_task": "{\n    \"drone_id\": \"planner\",\n    \"task_type\": \"create-implementation-plan\",\n    \"description\": \"Plan authentication module refactoring strategy\",\n    \"payload\": {\n        \"deliverables\": [\n            \"New auth module\",\n            \"Migration strategy\",\n            \"Test suite\",\n            \"Monitoring dashboard\",\n            \"Rollback procedures\"\n        ],\n        \"phases\": [\n            {\"name\": \"analysis\", \"duration\": \"3 days\", \"agents\": [\"architect\"]},\n            {\"name\": \"design\", \"duration\": \"4 days\", \"agents\": [\"architect\"]},\n            {\"name\": \"implementation\", \"duration\": \"8 days\", \"agents\": [\"coder\", \"integration-engineer\"]},\n            {\"name\": \"testing\", \"duration\": \"4 days\", \"agents\": [\"tester\", \"security-auditor\"]},\n            {\"name\": \"deployment\", \"duration\": \"2 days\", \"agents\": [\"integration-engineer\"]}\n        ],\n        \"resource_allocation\": {\n            \"architect\": \"56h\",\n            \"coder\": \"64h\",\n            \"integration-engineer\": \"40h\",\n            \"tester\": \"32h\",\n            \"security-auditor\": \"16h\"\n        },\n        \"risk_factors\": [\n            \"authentication failures\",\n            \"session management\",\n            \"data migration\",\n            \"performance impact\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Plan includes parallel running of old and new systems\",\n        \"Zero-downtime deployment strategy defined\",\n        \"Test coverage strategy meets 90% requirement\",\n        \"Backward compatibility verification approach specified\",\n        \"Monitoring and alerting strategy included\",\n        \"Resource allocation within budget constraints\",\n        \"Rollback procedures documented\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "plan",
        "context": "{\"feature_request\": \"Implement caching layer\", \"constraints\": {\"deadline\": \"1 week\", \"team_size\": 2, \"budget\": \"$400\"}, \"requirements\": {\"cache_hit_ratio\": \">80%\", \"invalidation\": \"automatic\", \"distributed\": \"required\"}}",
        "reasoning": "For implementing a distributed caching layer with specific performance requirements, I'll assign this to the planner drone. The task requires careful consideration of cache strategies, invalidation mechanisms, and distributed system coordination. The planner drone can break this down into manageable phases while ensuring the cache hit ratio and automatic invalidation requirements are met.",
        "drone_task": "{\n    \"drone_id\": \"planner\",\n    \"task_type\": \"create-implementation-plan\",\n    \"description\": \"Plan distributed caching layer implementation\",\n    \"payload\": {\n        \"deliverables\": [\n            \"Cache service\",\n            \"Invalidation mechanism\",\n            \"Distribution protocol\",\n            \"Monitoring system\"\n        ],\n        \"phases\": [\n            {\n                \"name\": \"design\",\n                \"duration\": \"2 days\",\n                \"agents\": [\"architect\"]\n            },\n            {\n                \"name\": \"implement\",\n                \"duration\": \"3 days\",\n                \"agents\": [\"coder\"]\n            },\n            {\n                \"name\": \"test\",\n                \"duration\": \"2 days\",\n                \"agents\": [\"tester\"]\n            }\n        ],\n        \"resource_allocation\": {\n            \"architect\": \"16h\",\n            \"coder\": \"24h\",\n            \"tester\": \"16h\"\n        },\n        \"dependencies\": [\n            \"design→implement\",\n            \"implement→test\"\n        ],\n        \"risk_factors\": [\n            \"cache coherence\",\n            \"network partitions\",\n            \"invalidation races\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Cache hit ratio exceeds 80% in testing\",\n        \"Automatic invalidation verified\",\n        \"Distribution protocol tested\",\n        \"Performance metrics implemented\",\n        \"Failure recovery documented\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "plan",
        "context": "{\"feature_request\": \"Build CI/CD pipeline\", \"constraints\": {\"deadline\": \"2 weeks\", \"team_size\": 3, \"budget\": \"$600\"}, \"requirements\": {\"automated_testing\": \"required\", \"deployment\": \"blue-green\", \"rollback\": \"automatic\"}}",
        "reasoning": "For a CI/CD pipeline implementation, I'll assign this to the planner drone as it requires comprehensive coordination of multiple phases and infrastructure components. The task needs careful orchestration of build, test, and deployment stages with specific focus on automated testing and blue-green deployment strategy. The planner drone is best suited to create a detailed implementation roadmap that ensures all requirements are met within the given constraints.",
        "drone_task": "{\n    \"drone_id\": \"planner\",\n    \"task_type\": \"create-implementation-plan\",\n    \"description\": \"Plan CI/CD pipeline implementation\",\n    \"payload\": {\n        \"deliverables\": [\n            \"Build pipeline\",\n            \"Test automation\",\n            \"Deployment system\",\n            \"Monitoring setup\"\n        ],\n        \"phases\": [\n            {\n                \"name\": \"infrastructure\",\n                \"duration\": \"3 days\",\n                \"agents\": [\"devops\"]\n            },\n            {\n                \"name\": \"pipeline\",\n                \"duration\": \"5 days\",\n                \"agents\": [\"integration-engineer\"]\n            },\n            {\n                \"name\": \"automation\",\n                \"duration\": \"4 days\",\n                \"agents\": [\"coder\"]\n            },\n            {\n                \"name\": \"validation\",\n                \"duration\": \"2 days\",\n                \"agents\": [\"tester\"]\n            }\n        ],\n        \"resource_allocation\": {\n            \"devops\": \"24h\",\n            \"integration-engineer\": \"40h\",\n            \"coder\": \"32h\",\n            \"tester\": \"16h\"\n        },\n        \"dependencies\": [\n            \"infrastructure→pipeline\",\n            \"pipeline→automation\",\n            \"automation→validation\"\n        ],\n        \"risk_factors\": [\n            \"deployment downtime\",\n            \"test reliability\",\n            \"rollback failures\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"All test stages automated and reliable\",\n        \"Blue-green deployment configured and tested\",\n        \"Automatic rollback mechanism verified\",\n        \"Pipeline completion under 30 minutes\",\n        \"Zero-downtime deployment demonstrated\",\n        \"Monitoring and alerts configured\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "plan",
        "context": "{\"feature_request\": \"Migrate to microservices\", \"constraints\": {\"deadline\": \"8 weeks\", \"team_size\": 6, \"budget\": \"$3000\"}, \"requirements\": {\"service_isolation\": \"required\", \"data_consistency\": \"eventual\", \"monitoring\": \"comprehensive\"}}",
        "reasoning": "For a complex microservices migration, we need the planner drone to create a comprehensive implementation strategy. This requires:\n1. Breaking down the monolith into services\n2. Planning data migration and consistency\n3. Establishing monitoring infrastructure\n4. Coordinating team resources\n5. Managing risks and dependencies\n\nThe planner drone is best suited due to its:\n- Ability to handle large-scale architectural changes\n- Experience with distributed systems planning\n- Resource allocation expertise\n- Risk assessment capabilities",
        "drone_task": "{\n    \"drone_id\": \"planner\",\n    \"task_type\": \"create-implementation-plan\",\n    \"description\": \"Plan microservices migration strategy\",\n    \"payload\": {\n        \"deliverables\": [\n            \"Service architecture diagram\",\n            \"Migration roadmap\",\n            \"Data consistency patterns\",\n            \"Monitoring infrastructure\",\n            \"Deployment strategy\"\n        ],\n        \"phases\": [\n            {\"name\": \"discovery\", \"duration\": \"1 week\", \"agents\": [\"architect\", \"reviewer\"]},\n            {\"name\": \"design\", \"duration\": \"2 weeks\", \"agents\": [\"architect\"]},\n            {\"name\": \"infrastructure\", \"duration\": \"1 week\", \"agents\": [\"devops\"]},\n            {\"name\": \"migration\", \"duration\": \"3 weeks\", \"agents\": [\"coder\", \"integration-engineer\"]},\n            {\"name\": \"testing\", \"duration\": \"1 week\", \"agents\": [\"tester\", \"integration-engineer\"]}\n        ],\n        \"resource_allocation\": {\n            \"architect\": \"120h\",\n            \"reviewer\": \"40h\",\n            \"devops\": \"40h\",\n            \"coder\": \"240h\",\n            \"integration-engineer\": \"160h\",\n            \"tester\": \"40h\"\n        },\n        \"dependencies\": [\n            \"discovery→design\",\n            \"design→infrastructure\",\n            \"infrastructure→migration\",\n            \"migration→testing\"\n        ],\n        \"risk_factors\": [\n            \"service coupling\",\n            \"data consistency\",\n            \"performance degradation\",\n            \"deployment complexity\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Service boundaries clearly defined\",\n        \"Data consistency patterns documented\",\n        \"Resource allocation optimized within budget\",\n        \"Risk mitigation strategies identified\",\n        \"Monitoring requirements specified\",\n        \"Timeline meets 8-week deadline\",\n        \"Team assignments balanced across 6 members\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "plan",
        "context": "{\"feature_request\": \"Add GraphQL API\", \"constraints\": {\"deadline\": \"2 weeks\", \"team_size\": 3, \"budget\": \"$700\"}, \"requirements\": {\"schema_design\": \"required\", \"query_optimization\": \"required\", \"documentation\": \"auto-generated\"}}",
        "reasoning": "For implementing a GraphQL API, I'll assign the planner drone to create a comprehensive implementation plan. This requires careful coordination between schema design, implementation, and optimization phases. The planner drone is best suited due to its ability to:\n1. Break down complex API implementations into manageable phases\n2. Consider dependencies between schema design and implementation\n3. Account for query optimization requirements\n4. Ensure proper documentation generation\n5. Coordinate multiple team members effectively",
        "drone_task": "{\n    \"drone_id\": \"planner\",\n    \"task_type\": \"create-implementation-plan\",\n    \"description\": \"Plan GraphQL API implementation\",\n    \"payload\": {\n        \"deliverables\": [\n            \"GraphQL schema\",\n            \"Resolvers\",\n            \"Query optimization layer\",\n            \"Auto-generated documentation\"\n        ],\n        \"phases\": [\n            {\n                \"name\": \"schema_design\",\n                \"duration\": \"3 days\",\n                \"agents\": [\"architect\"]\n            },\n            {\n                \"name\": \"implementation\",\n                \"duration\": \"6 days\",\n                \"agents\": [\"coder\"]\n            },\n            {\n                \"name\": \"optimization\",\n                \"duration\": \"3 days\",\n                \"agents\": [\"performance-engineer\"]\n            },\n            {\n                \"name\": \"test\",\n                \"duration\": \"2 days\",\n                \"agents\": [\"tester\"]\n            }\n        ],\n        \"resource_allocation\": {\n            \"architect\": \"24h\",\n            \"coder\": \"48h\",\n            \"performance-engineer\": \"24h\",\n            \"tester\": \"16h\"\n        },\n        \"dependencies\": [\n            \"schema_design→implementation\",\n            \"implementation→optimization\",\n            \"optimization→test\"\n        ],\n        \"risk_factors\": [\n            \"n+1 query problems\",\n            \"schema complexity\",\n            \"resolver performance\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Schema design reviewed and approved\",\n        \"Query optimization metrics meet requirements\",\n        \"Documentation is complete and auto-generated\",\n        \"All resolvers implemented and tested\",\n        \"Performance benchmarks passed\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "plan",
        "context": "{\"feature_request\": \"Implement rate limiting\", \"constraints\": {\"deadline\": \"4 days\", \"team_size\": 2, \"budget\": \"$250\"}, \"requirements\": {\"algorithm\": \"token bucket\", \"distributed\": \"required\", \"user_experience\": \"graceful degradation\"}}",
        "reasoning": "For implementing a distributed rate limiting system, I'll assign this to the planner drone to create a detailed implementation plan. The task requires careful coordination between distributed systems components and user experience considerations. The planner drone is best suited due to:\n1. Need for distributed system architecture planning\n2. Complex algorithm implementation (token bucket)\n3. Multiple integration points requiring careful sequencing\n4. Performance and reliability considerations\n5. Cross-cutting concerns across multiple services",
        "drone_task": "{\n    \"drone_id\": \"planner\",\n    \"task_type\": \"create-implementation-plan\",\n    \"description\": \"Plan distributed rate limiting implementation\",\n    \"payload\": {\n        \"deliverables\": [\n            \"Rate limiting service\",\n            \"Token bucket implementation\",\n            \"Distributed coordination\",\n            \"Client response handling\"\n        ],\n        \"phases\": [\n            {\"name\": \"design\", \"duration\": \"1 day\", \"agents\": [\"architect\"]},\n            {\"name\": \"implement\", \"duration\": \"2 days\", \"agents\": [\"coder\"]},\n            {\"name\": \"test\", \"duration\": \"1 day\", \"agents\": [\"tester\"]}\n        ],\n        \"resource_allocation\": {\n            \"architect\": \"8h\",\n            \"coder\": \"16h\",\n            \"tester\": \"8h\"\n        },\n        \"dependencies\": [\n            \"design→implement\",\n            \"implement→test\"\n        ],\n        \"risk_factors\": [\n            \"distributed consensus\",\n            \"race conditions\",\n            \"performance impact\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Token bucket algorithm correctly implemented\",\n        \"Distributed coordination mechanism working\",\n        \"Graceful degradation UX verified\",\n        \"Performance metrics within SLA\",\n        \"Rate limit headers properly set\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "plan",
        "context": "{\"feature_request\": \"Build admin dashboard\", \"constraints\": {\"deadline\": \"3 weeks\", \"team_size\": 4, \"budget\": \"$1000\"}, \"requirements\": {\"real_time_updates\": \"required\", \"role_based_access\": \"required\", \"responsive\": \"mobile-friendly\"}}",
        "reasoning": "For this admin dashboard project, I'll assign the planner drone to create a comprehensive implementation plan. The task requires careful coordination of UI/UX, backend services, and real-time capabilities. The planner drone is best suited due to:\n1. Complex multi-team coordination needed\n2. Multiple interdependent deliverables\n3. Need for resource optimization across 4 team members\n4. Critical real-time and security requirements",
        "drone_task": "{\n    \"drone_id\": \"planner\",\n    \"task_type\": \"create-implementation-plan\",\n    \"description\": \"Plan admin dashboard implementation\",\n    \"payload\": {\n        \"deliverables\": [\n            \"Admin UI components\",\n            \"Real-time backend service\",\n            \"RBAC system\",\n            \"Analytics module\",\n            \"Mobile responsive design\"\n        ],\n        \"phases\": [\n            {\"name\": \"design\", \"duration\": \"5 days\", \"agents\": [\"architect\"]},\n            {\"name\": \"backend\", \"duration\": \"8 days\", \"agents\": [\"coder\", \"integration-engineer\"]},\n            {\"name\": \"frontend\", \"duration\": \"10 days\", \"agents\": [\"coder\"]},\n            {\"name\": \"test\", \"duration\": \"4 days\", \"agents\": [\"tester\", \"security-auditor\"]}\n        ],\n        \"resource_allocation\": {\n            \"architect\": \"40h\",\n            \"coder\": \"144h\",\n            \"integration-engineer\": \"64h\",\n            \"tester\": \"32h\"\n        },\n        \"dependencies\": [\n            \"design→[backend,frontend]\",\n            \"[backend,frontend]→test\"\n        ],\n        \"risk_factors\": [\n            \"real-time performance\",\n            \"security vulnerabilities\",\n            \"mobile responsiveness\",\n            \"cross-browser compatibility\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Architecture design approved by tech lead\",\n        \"All UI components responsive on mobile devices\",\n        \"Real-time updates working with <1s latency\",\n        \"RBAC implementation passes security audit\",\n        \"E2E test coverage >80%\",\n        \"Performance metrics within SLA\",\n        \"Documentation complete and reviewed\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "plan",
        "context": "{\"feature_request\": \"Optimize database queries\", \"constraints\": {\"deadline\": \"1 week\", \"team_size\": 2, \"budget\": \"$400\"}, \"requirements\": {\"performance_gain\": \"50%\", \"no_schema_changes\": \"preferred\", \"monitoring\": \"required\"}}",
        "reasoning": "For this database optimization task, I'll assign the planner drone to create a comprehensive optimization strategy. The planner is best suited because:\n1. Task requires careful coordination between performance analysis and implementation\n2. Need to balance multiple constraints (deadline, no schema changes, monitoring)\n3. Must plan incremental improvements to reach 50% performance gain target\n4. Requires monitoring integration planning",
        "drone_task": "{\n    \"drone_id\": \"planner\",\n    \"task_type\": \"create-optimization-plan\",\n    \"description\": \"Plan database query optimization strategy\",\n    \"payload\": {\n        \"deliverables\": [\n            \"Query analysis report\",\n            \"Optimization strategies\",\n            \"Monitoring setup\",\n            \"Implementation plan\"\n        ],\n        \"phases\": [\n            {\"name\": \"analyze\", \"duration\": \"2 days\", \"agents\": [\"debugger\"]},\n            {\"name\": \"optimize\", \"duration\": \"3 days\", \"agents\": [\"coder\"]},\n            {\"name\": \"monitor\", \"duration\": \"2 days\", \"agents\": [\"integration-engineer\"]}\n        ],\n        \"resource_allocation\": {\n            \"debugger\": \"16h\",\n            \"coder\": \"24h\",\n            \"integration-engineer\": \"16h\"\n        },\n        \"dependencies\": [\n            \"analyze→optimize\",\n            \"optimize→monitor\"\n        ],\n        \"risk_factors\": [\n            \"query regression\",\n            \"system stability\",\n            \"performance measurement accuracy\"\n        ]\n    },\n    \"acceptance_criteria\": [\n        \"Performance baseline established\",\n        \"50% improvement verified\",\n        \"Monitoring dashboard created\",\n        \"No schema modifications required\",\n        \"Query execution plans documented\"\n    ]\n}"
      }
    ],
    "signature": {
      "instructions": "Delegate task to drone agent with clear instructions.\n\nYou are a Princess agent coordinating your specialized drone hive.\nYour role is to take high-level workflow phases and convert them\ninto specific, actionable tasks for your drone agents.\n\nPrincess-Dev drones: coder, reviewer, debugger, integration-engineer\nPrincess-Quality drones: tester, nasa-enforcer, theater-detector, fsm-analyzer\nPrincess-Coordination drones: orchestrator, planner, cost-tracker\n\nEach drone task must have:\n- Specific drone agent assignment\n- Task type matching drone capabilities\n- Clear context from previous phases\n- Concrete deliverables\n- Quality gates/acceptance criteria\n\nFollow the 26 prompt engineering principles:\n- Clarity: Unambiguous instructions\n- Context: Include relevant phase results\n- Constraints: Respect drone capabilities\n- Structure: Output valid JSON format",
      "fields": [
        {
          "prefix": "Phase:",
          "description": "Development phase to execute (design, code, test, review, etc.)"
        },
        {
          "prefix": "Context:",
          "description": "Context and results from previous phases that this phase depends on"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "Delegation reasoning explaining drone selection and task structure"
        },
        {
          "prefix": "Drone Task:",
          "description": "Structured task for drone agent as JSON object. Must have: {'drone_id': str, 'task_type': str, 'description': str, 'payload': dict, 'acceptance_criteria': list[str]}"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.0"
    }
  }
}
