{
  "aggregate.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "drone_results": "{\"success\": true, \"files_merged\": 9, \"merge_conflicts\": 0, \"conflicts_resolved\": 0, \"tests_passed\": true, \"integration_tests_run\": 24, \"execution_time_ms\": 17512}",
        "quality_gates": "{\"files_integrated\": 8, \"conflicts_resolved\": 0, \"integration_test_pass_rate\": 100}",
        "aggregated_result": "{\"phase\": \"integrate\", \"status\": \"complete\", \"summary\": \"Integration successful. 0 conflicts resolved.\", \"quality_metrics\": {\"files_integrated\": 8, \"conflicts_resolved\": 0, \"integration_test_pass_rate\": 100}, \"next_phase\": \"deploy\", \"blockers\": [], \"recommendations\": [\"Deploy to staging\"]}"
      },
      {
        "drone_results": "{\"success\": false, \"files_merged\": 7, \"merge_conflicts\": 3, \"conflicts_resolved\": 0, \"tests_passed\": false, \"integration_tests_run\": 11, \"execution_time_ms\": 13316}",
        "quality_gates": "{\"files_integrated\": 5, \"conflicts_resolved\": 0, \"integration_test_pass_rate\": 84}",
        "aggregated_result": "{\"phase\": \"integrate\", \"status\": \"blocked\", \"summary\": \"Integration blocked. 3 conflicts detected.\", \"quality_metrics\": {\"files_integrated\": 5, \"conflicts_resolved\": 0, \"integration_test_pass_rate\": 84}, \"next_phase\": \"code\", \"blockers\": [\"Resolve 3 merge conflicts\", \"Fix failing integration tests\"], \"recommendations\": [\"Coordinate with feature branch owner\"]}"
      },
      {
        "drone_results": "{\"success\": false, \"files_merged\": 3, \"merge_conflicts\": 6, \"conflicts_resolved\": 0, \"tests_passed\": false, \"integration_tests_run\": 18, \"execution_time_ms\": 16638}",
        "quality_gates": "{\"files_integrated\": 9, \"conflicts_resolved\": 0, \"integration_test_pass_rate\": 76}",
        "aggregated_result": "{\"phase\": \"integrate\", \"status\": \"blocked\", \"summary\": \"Integration blocked. 6 conflicts detected.\", \"quality_metrics\": {\"files_integrated\": 9, \"conflicts_resolved\": 0, \"integration_test_pass_rate\": 76}, \"next_phase\": \"code\", \"blockers\": [\"Resolve 6 merge conflicts\", \"Fix failing integration tests\"], \"recommendations\": [\"Coordinate with feature branch owner\"]}"
      },
      {
        "drone_results": "{\"success\": true, \"files_merged\": 12, \"merge_conflicts\": 1, \"conflicts_resolved\": 1, \"tests_passed\": true, \"integration_tests_run\": 13, \"execution_time_ms\": 8251}",
        "quality_gates": "{\"files_integrated\": 8, \"conflicts_resolved\": 1, \"integration_test_pass_rate\": 100}",
        "aggregated_result": "{\"phase\": \"integrate\", \"status\": \"complete\", \"summary\": \"Integration successful. 1 conflicts resolved.\", \"quality_metrics\": {\"files_integrated\": 8, \"conflicts_resolved\": 1, \"integration_test_pass_rate\": 100}, \"next_phase\": \"deploy\", \"blockers\": [], \"recommendations\": [\"Deploy to staging\"]}"
      },
      {
        "drone_results": "{\"success\": true, \"files_merged\": 5, \"merge_conflicts\": 1, \"conflicts_resolved\": 1, \"tests_passed\": true, \"integration_tests_run\": 10, \"execution_time_ms\": 6349}",
        "quality_gates": "{\"files_integrated\": 10, \"conflicts_resolved\": 1, \"integration_test_pass_rate\": 100}",
        "aggregated_result": "{\"phase\": \"integrate\", \"status\": \"complete\", \"summary\": \"Integration successful. 1 conflicts resolved.\", \"quality_metrics\": {\"files_integrated\": 10, \"conflicts_resolved\": 1, \"integration_test_pass_rate\": 100}, \"next_phase\": \"deploy\", \"blockers\": [], \"recommendations\": [\"Deploy to staging\"]}"
      }
    ],
    "signature": {
      "instructions": "Aggregate drone results into coherent princess-level output.\n\nYou are a Princess agent receiving results from multiple drone agents\nthat executed tasks in parallel or sequence. Your role is to combine\ntheir individual results into a unified, comprehensive result that\ncan be reported to the Queen.\n\nAggregation must include:\n- Success/failure status of overall workflow\n- Quality metrics from all drones\n- Validation against quality gates\n- Artifacts produced by drones\n- Recommendations or next steps\n\nFollow the 26 prompt engineering principles:\n- Completeness: Include all relevant drone outputs\n- Quality: Validate against gates (test coverage, NASA compliance, etc.)\n- Clarity: Summarize complex results clearly\n- Structure: Output valid JSON format",
      "fields": [
        {
          "prefix": "Drone Results:",
          "description": "List of results from drone agents (each with success, data, metrics)"
        },
        {
          "prefix": "Quality Gates:",
          "description": "Quality gates to validate against (e.g., test_coverage >= 80%)"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "Aggregation reasoning explaining how results were combined and validated"
        },
        {
          "prefix": "Aggregated Result:",
          "description": "Aggregated result as JSON object. Must have: {'success': bool, 'overall_score': float, 'gates_passed': int, 'gates_failed': int, 'artifacts': list[str], 'recommendations': list[str]}"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.0"
    }
  }
}
