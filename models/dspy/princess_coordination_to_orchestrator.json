{
  "delegate.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "phase": "orchestrate",
        "context": "{\"previous_phase\": \"plan\", \"plan\": {\"phases\": [\"design\", \"implement\", \"test\", \"deploy\"], \"estimated_hours\": 12, \"team_size\": 3}, \"resources\": {\"available_agents\": [\"coder\", \"tester\", \"reviewer\"], \"budget\": \"$500\"}}",
        "reasoning": "For this software development workflow, I'll assign the orchestrator drone to coordinate the implementation phases. The workflow requires careful sequencing of design, implementation, testing and deployment activities. Given the available agents (coder, tester, reviewer), we'll need to optimize their usage across phases. The coder will handle both design and implementation, the tester will manage testing, and the reviewer will oversee deployment and final checks. The orchestrator will ensure smooth transitions between phases and maintain quality gates.",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"orchestrate-workflow\",\n    \"description\": \"Orchestrate full software development lifecycle\",\n    \"payload\": {\n        \"workflow\": {\n            \"phases\": [\n                {\"name\": \"design\", \"agent\": \"coder\", \"parallel\": false},\n                {\"name\": \"implement\", \"agent\": \"coder\", \"parallel\": false},\n                {\"name\": \"test\", \"agent\": \"tester\", \"parallel\": false},\n                {\"name\": \"deploy\", \"agent\": \"reviewer\", \"parallel\": false}\n            ],\n            \"dependencies\": [\n                \"design→implement\",\n                \"implement→test\",\n                \"test→deploy\"\n            ],\n            \"resource_allocation\": {\n                \"coder\": \"7h\",\n                \"tester\": \"3h\",\n                \"reviewer\": \"2h\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"All phases completed within estimated timeframe\",\n        \"Design documents approved before implementation\",\n        \"All tests passing before deployment\",\n        \"Deployment verified with zero critical issues\",\n        \"Resource utilization within budget constraints\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "orchestrate",
        "context": "{\"previous_phase\": \"plan\", \"plan\": {\"phases\": [\"research\", \"prototype\", \"validate\"], \"estimated_hours\": 8, \"team_size\": 2}, \"resources\": {\"available_agents\": [\"researcher\", \"coder\"], \"budget\": \"$300\"}}",
        "reasoning": "For this experimental research and prototyping task, I'll assign the orchestrator drone to coordinate the workflow. The task requires careful sequencing between research and implementation phases with a small team. The orchestrator will:\n1. Manage the research->prototype->validate sequence\n2. Coordinate between researcher and coder roles\n3. Ensure budget constraints are met within 8 hours\n4. Track deliverables and validation criteria\n5. Maintain clear handoffs between phases",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"orchestrate-workflow\",\n    \"description\": \"Orchestrate research and prototype development workflow\",\n    \"payload\": {\n        \"workflow\": {\n            \"phases\": [\n                {\"name\": \"research\", \"agent\": \"researcher\", \"parallel\": false},\n                {\"name\": \"prototype\", \"agent\": \"coder\", \"parallel\": false},\n                {\"name\": \"validate\", \"agent\": \"researcher\", \"parallel\": false}\n            ],\n            \"dependencies\": [\"research→prototype\", \"prototype→validate\"],\n            \"resource_allocation\": {\n                \"researcher\": \"4h\",\n                \"coder\": \"4h\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Research findings documented and actionable\",\n        \"Prototype implements research recommendations\",\n        \"Validation results recorded and analyzed\",\n        \"Time and budget constraints met\",\n        \"Clear handoff documentation between phases\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "orchestrate",
        "context": "{\"previous_phase\": \"plan\", \"plan\": {\"phases\": [\"audit\", \"refactor\", \"test\", \"document\"], \"estimated_hours\": 16, \"team_size\": 4}, \"resources\": {\"available_agents\": [\"reviewer\", \"coder\", \"tester\", \"docs-writer\"], \"budget\": \"$800\"}}",
        "reasoning": "For this security-focused workflow, I'll assign the orchestrator drone to coordinate the security audit and refactoring process. The workflow requires careful sequencing of phases with clear dependencies and quality gates. The orchestrator will ensure:\n\n1. Proper phase sequencing: audit → refactor → test → document\n2. Resource allocation across the 16-hour timeline\n3. Quality gates focused on security and compliance\n4. Parallel execution where possible (testing and documentation)\n5. Clear acceptance criteria for each phase",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"orchestrate-workflow\",\n    \"description\": \"Orchestrate security audit and refactoring workflow\",\n    \"payload\": {\n        \"workflow\": {\n            \"phases\": [\n                {\"name\": \"audit\", \"agent\": \"reviewer\", \"parallel\": false},\n                {\"name\": \"refactor\", \"agent\": \"coder\", \"parallel\": false},\n                {\"name\": \"test\", \"agent\": \"tester\", \"parallel\": true},\n                {\"name\": \"document\", \"agent\": \"docs-writer\", \"parallel\": true}\n            ],\n            \"dependencies\": [\n                \"audit→refactor\",\n                \"refactor→[test,document]\"\n            ],\n            \"resource_allocation\": {\n                \"reviewer\": \"4h\",\n                \"coder\": \"6h\",\n                \"tester\": \"4h\",\n                \"docs-writer\": \"2h\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Security vulnerabilities identified and documented\",\n        \"Refactoring addresses all security findings\",\n        \"Test coverage meets security requirements\",\n        \"Security changes properly documented\",\n        \"All phases completed within budget\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "orchestrate",
        "context": "{\"previous_phase\": \"plan\", \"plan\": {\"phases\": [\"secure\", \"deploy\", \"monitor\"], \"estimated_hours\": 6, \"team_size\": 3}, \"resources\": {\"available_agents\": [\"security-manager\", \"devops\", \"cost-tracker\"], \"budget\": \"$400\"}}",
        "reasoning": "For this security-focused deployment orchestration, I'll assign the orchestrator drone to coordinate the workflow. The task requires careful sequencing of security hardening, deployment, and monitoring phases. Given the security-critical nature and the available specialized agents, we need strict quality gates and clear dependencies. The orchestrator will ensure secure deployment practices while staying within the 6-hour timeframe and $400 budget.",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"orchestrate-workflow\",\n    \"description\": \"Orchestrate secure deployment workflow\",\n    \"payload\": {\n        \"workflow\": {\n            \"phases\": [\n                {\"name\": \"secure\", \"agent\": \"security-manager\", \"parallel\": false},\n                {\"name\": \"deploy\", \"agent\": \"devops\", \"parallel\": false},\n                {\"name\": \"monitor\", \"agent\": \"cost-tracker\", \"parallel\": false}\n            ],\n            \"dependencies\": [\"secure→deploy\", \"deploy→monitor\"],\n            \"resource_allocation\": {\n                \"security-manager\": \"2h\",\n                \"devops\": \"2h\",\n                \"cost-tracker\": \"2h\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Security compliance verified\",\n        \"Zero critical vulnerabilities\",\n        \"Deployment rollback plan in place\",\n        \"Monitoring alerts configured\",\n        \"Cost thresholds established\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "orchestrate",
        "context": "{\"previous_phase\": \"plan\", \"plan\": {\"phases\": [\"analyze\", \"optimize\", \"benchmark\"], \"estimated_hours\": 10, \"team_size\": 2}, \"resources\": {\"available_agents\": [\"researcher\", \"coder\"], \"budget\": \"$600\"}}",
        "reasoning": "For this performance optimization workflow, I'll assign the orchestrator drone to coordinate the effort. The task requires careful sequencing of analysis, optimization implementation, and performance benchmarking. Given the small team size (2) and focused scope, we'll structure this as a linear workflow with clear handoffs between phases. The researcher will handle analysis and benchmarking, while the coder implements optimizations. The orchestrator will ensure proper metrics collection and validation at each phase.",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"orchestrate-workflow\",\n    \"description\": \"Orchestrate performance optimization workflow\",\n    \"payload\": {\n        \"workflow\": {\n            \"phases\": [\n                {\"name\": \"analyze\", \"agent\": \"researcher\", \"parallel\": false},\n                {\"name\": \"optimize\", \"agent\": \"coder\", \"parallel\": false},\n                {\"name\": \"benchmark\", \"agent\": \"researcher\", \"parallel\": false}\n            ],\n            \"dependencies\": [\"analyze→optimize\", \"optimize→benchmark\"],\n            \"resource_allocation\": {\n                \"researcher\": \"4h\",\n                \"coder\": \"6h\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Performance bottlenecks identified and documented\",\n        \"Optimization implementations completed and tested\",\n        \"Performance improvements quantified with metrics\",\n        \"Resource utilization within budget constraints\",\n        \"All optimization changes properly documented\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "orchestrate",
        "context": "{\"previous_phase\": \"plan\", \"plan\": {\"phases\": [\"spec\", \"design\", \"implement\", \"integrate\"], \"estimated_hours\": 20, \"team_size\": 4}, \"resources\": {\"available_agents\": [\"spec-writer\", \"architect\", \"coder\", \"integration-engineer\"], \"budget\": \"$1000\"}}",
        "reasoning": "For this complex development workflow requiring multiple specialized roles, I'll assign the orchestrator drone to coordinate the end-to-end process. The workflow involves specification writing, architectural design, implementation, and integration - a classic software development lifecycle that requires careful sequencing and coordination.\n\nThe orchestrator is best suited because:\n1. Multiple phase dependencies need management\n2. Resource allocation across 20 hours needs optimization\n3. Different specialist agents need coordination\n4. Budget tracking across $1000 requires oversight\n\nThe task will be structured sequentially with clear handoffs between phases, ensuring each specialist can work effectively while maintaining project coherence.",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"orchestrate-workflow\",\n    \"description\": \"Orchestrate full-stack feature development workflow\",\n    \"payload\": {\n        \"workflow\": {\n            \"phases\": [\n                {\"name\": \"spec\", \"agent\": \"spec-writer\", \"parallel\": false},\n                {\"name\": \"design\", \"agent\": \"architect\", \"parallel\": false},\n                {\"name\": \"implement\", \"agent\": \"coder\", \"parallel\": false},\n                {\"name\": \"integrate\", \"agent\": \"integration-engineer\", \"parallel\": false}\n            ],\n            \"dependencies\": [\n                \"spec→design\",\n                \"design→implement\",\n                \"implement→integrate\"\n            ],\n            \"resource_allocation\": {\n                \"spec-writer\": \"4h\",\n                \"architect\": \"6h\",\n                \"coder\": \"7h\",\n                \"integration-engineer\": \"3h\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"All phase transitions documented and approved\",\n        \"Resource utilization within 20-hour budget\",\n        \"Integration points identified and validated\",\n        \"Quality gates passed for each phase\",\n        \"Technical debt tracked and minimized\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "orchestrate",
        "context": "{\"previous_phase\": \"plan\", \"plan\": {\"phases\": [\"debug\", \"fix\", \"verify\"], \"estimated_hours\": 5, \"team_size\": 2}, \"resources\": {\"available_agents\": [\"debugger\", \"tester\"], \"budget\": \"$250\"}}",
        "reasoning": "For this debugging workflow, I'll assign the orchestrator drone to coordinate the bug fix process. The task requires careful sequencing between debugging and verification phases. Given the small team size (2) and focused scope, we'll structure a linear workflow with clear handoffs between the debugger and tester agents. The orchestrator will ensure proper bug documentation, fix implementation, and verification steps are followed.",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"orchestrate-workflow\",\n    \"description\": \"Orchestrate bug fix workflow\",\n    \"payload\": {\n        \"workflow\": {\n            \"phases\": [\n                {\"name\": \"debug\", \"agent\": \"debugger\", \"parallel\": false},\n                {\"name\": \"fix\", \"agent\": \"debugger\", \"parallel\": false},\n                {\"name\": \"verify\", \"agent\": \"tester\", \"parallel\": false}\n            ],\n            \"dependencies\": [\"debug→fix\", \"fix→verify\"],\n            \"resource_allocation\": {\n                \"debugger\": \"3.5h\",\n                \"tester\": \"1.5h\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Root cause identified and documented\",\n        \"Fix implemented with minimal side effects\",\n        \"All regression tests passing\",\n        \"Bug reproduction steps verified to no longer occur\",\n        \"Fix meets performance requirements\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "orchestrate",
        "context": "{\"previous_phase\": \"plan\", \"plan\": {\"phases\": [\"research\", \"design\", \"prototype\", \"evaluate\"], \"estimated_hours\": 14, \"team_size\": 3}, \"resources\": {\"available_agents\": [\"researcher\", \"architect\", \"coder\"], \"budget\": \"$700\"}}",
        "reasoning": "For this research and prototyping workflow, I'll assign the orchestrator drone to coordinate the sequence of activities. The workflow requires careful coordination between research, design, and implementation phases with clear handoffs. The orchestrator is best suited to:\n1. Manage dependencies between research findings and design decisions\n2. Ensure prototype implementation aligns with design specs\n3. Track resource utilization across the 14-hour timeline\n4. Coordinate evaluation criteria and feedback loops",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"orchestrate-workflow\",\n    \"description\": \"Orchestrate research-driven prototype development\",\n    \"payload\": {\n        \"workflow\": {\n            \"phases\": [\n                {\"name\": \"research\", \"agent\": \"researcher\", \"parallel\": false},\n                {\"name\": \"design\", \"agent\": \"architect\", \"parallel\": false},\n                {\"name\": \"prototype\", \"agent\": \"coder\", \"parallel\": false},\n                {\"name\": \"evaluate\", \"agent\": \"researcher\", \"parallel\": false}\n            ],\n            \"dependencies\": [\n                \"research→design\",\n                \"design→prototype\",\n                \"prototype→evaluate\"\n            ],\n            \"resource_allocation\": {\n                \"researcher\": \"5h\",\n                \"architect\": \"4h\",\n                \"coder\": \"5h\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Research findings documented and shared\",\n        \"Design specifications approved\",\n        \"Prototype implements core features\",\n        \"Evaluation metrics defined and measured\",\n        \"Resource utilization within budget\",\n        \"All phase transitions properly logged\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "orchestrate",
        "context": "{\"previous_phase\": \"plan\", \"plan\": {\"phases\": [\"review\", \"refactor\", \"test\"], \"estimated_hours\": 8, \"team_size\": 3}, \"resources\": {\"available_agents\": [\"reviewer\", \"coder\", \"tester\"], \"budget\": \"$400\"}}",
        "reasoning": "For this code quality improvement workflow, I'll assign the orchestrator drone to coordinate the process. The workflow requires careful sequencing of code review, refactoring, and testing phases. Given the 8-hour timeline and 3-person team, we'll structure it as a linear workflow with clear handoffs between phases. The orchestrator will ensure code quality standards are maintained throughout the process and that each phase builds upon the previous one's outputs.",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"orchestrate-workflow\",\n    \"description\": \"Orchestrate code quality improvement workflow\",\n    \"payload\": {\n        \"workflow\": {\n            \"phases\": [\n                {\"name\": \"review\", \"agent\": \"reviewer\", \"parallel\": false},\n                {\"name\": \"refactor\", \"agent\": \"coder\", \"parallel\": false},\n                {\"name\": \"test\", \"agent\": \"tester\", \"parallel\": false}\n            ],\n            \"dependencies\": [\"review→refactor\", \"refactor→test\"],\n            \"resource_allocation\": {\n                \"reviewer\": \"2h\",\n                \"coder\": \"4h\",\n                \"tester\": \"2h\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"Code review completed with documented findings\",\n        \"Refactoring addresses all review findings\",\n        \"Test coverage meets minimum 90% threshold\",\n        \"No new technical debt introduced\",\n        \"Performance metrics maintained or improved\"\n    ]\n}"
      },
      {
        "augmented": true,
        "phase": "orchestrate",
        "context": "{\"previous_phase\": \"plan\", \"plan\": {\"phases\": [\"design\", \"implement\", \"document\", \"deploy\"], \"estimated_hours\": 18, \"team_size\": 4}, \"resources\": {\"available_agents\": [\"architect\", \"coder\", \"docs-writer\", \"devops\"], \"budget\": \"$900\"}}",
        "reasoning": "For this orchestration task, I'll assign the orchestrator drone to coordinate the workflow for what appears to be a full-stack feature implementation. The workflow requires careful sequencing of design, implementation, documentation, and deployment phases. Given the 18-hour estimate and 4-person team, this seems to be a medium-sized feature requiring proper coordination of dependencies and parallel execution where possible. Documentation can run partially parallel with implementation to improve efficiency, while deployment must wait for all other phases to complete.",
        "drone_task": "{\n    \"drone_id\": \"orchestrator\",\n    \"task_type\": \"orchestrate-workflow\",\n    \"description\": \"Orchestrate full-stack feature implementation workflow\",\n    \"payload\": {\n        \"workflow\": {\n            \"phases\": [\n                {\"name\": \"design\", \"agent\": \"architect\", \"parallel\": false},\n                {\"name\": \"implement\", \"agent\": \"coder\", \"parallel\": false},\n                {\"name\": \"document\", \"agent\": \"docs-writer\", \"parallel\": true},\n                {\"name\": \"deploy\", \"agent\": \"devops\", \"parallel\": false}\n            ],\n            \"dependencies\": [\"design→implement\", \"implement→document\", \"implement→deploy\", \"document→deploy\"],\n            \"resource_allocation\": {\n                \"architect\": \"4h\",\n                \"coder\": \"8h\",\n                \"docs-writer\": \"3h\",\n                \"devops\": \"3h\"\n            }\n        }\n    },\n    \"acceptance_criteria\": [\n        \"All phase transitions properly coordinated\",\n        \"Resource utilization within budget constraints\",\n        \"Dependencies correctly managed\",\n        \"Documentation completed before deployment\",\n        \"Quality gates passed for each phase\"\n    ]\n}"
      }
    ],
    "signature": {
      "instructions": "Delegate task to drone agent with clear instructions.\n\nYou are a Princess agent coordinating your specialized drone hive.\nYour role is to take high-level workflow phases and convert them\ninto specific, actionable tasks for your drone agents.\n\nPrincess-Dev drones: coder, reviewer, debugger, integration-engineer\nPrincess-Quality drones: tester, nasa-enforcer, theater-detector, fsm-analyzer\nPrincess-Coordination drones: orchestrator, planner, cost-tracker\n\nEach drone task must have:\n- Specific drone agent assignment\n- Task type matching drone capabilities\n- Clear context from previous phases\n- Concrete deliverables\n- Quality gates/acceptance criteria\n\nFollow the 26 prompt engineering principles:\n- Clarity: Unambiguous instructions\n- Context: Include relevant phase results\n- Constraints: Respect drone capabilities\n- Structure: Output valid JSON format",
      "fields": [
        {
          "prefix": "Phase:",
          "description": "Development phase to execute (design, code, test, review, etc.)"
        },
        {
          "prefix": "Context:",
          "description": "Context and results from previous phases that this phase depends on"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "Delegation reasoning explaining drone selection and task structure"
        },
        {
          "prefix": "Drone Task:",
          "description": "Structured task for drone agent as JSON object. Must have: {'drone_id': str, 'task_type': str, 'description': str, 'payload': dict, 'acceptance_criteria': list[str]}"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.0"
    }
  }
}
