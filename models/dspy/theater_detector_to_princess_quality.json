{
  "aggregate.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "drone_results": "{\"success\": true, \"theater_score\": 10, \"theatrical_patterns\": 1, \"todo_comments\": 1, \"placeholder_code\": 0, \"mock_implementations\": 0, \"execution_time_ms\": 3732}",
        "quality_gates": "{\"theater_score\": 10, \"threshold\": 30, \"patterns_detected\": 1}",
        "aggregated_result": "{\"phase\": \"theater_detection\", \"status\": \"clean\", \"summary\": \"Theater score: 10/100. Code is production-ready.\", \"quality_metrics\": {\"theater_score\": 10, \"threshold\": 30, \"patterns_detected\": 1}, \"next_phase\": \"deploy\", \"blockers\": [], \"recommendations\": [\"Replace TODOs and placeholders with real implementation\"]}"
      },
      {
        "drone_results": "{\"success\": false, \"theater_score\": 71, \"theatrical_patterns\": 9, \"todo_comments\": 2, \"placeholder_code\": 2, \"mock_implementations\": 1, \"execution_time_ms\": 2469}",
        "quality_gates": "{\"theater_score\": 71, \"threshold\": 30, \"patterns_detected\": 9}",
        "aggregated_result": "{\"phase\": \"theater_detection\", \"status\": \"theatrical\", \"summary\": \"Theater score: 71/100. Found 9 theatrical patterns.\", \"quality_metrics\": {\"theater_score\": 71, \"threshold\": 30, \"patterns_detected\": 9}, \"next_phase\": \"code\", \"blockers\": [\"Remove 9 theatrical code patterns\"], \"recommendations\": [\"Replace TODOs and placeholders with real implementation\"]}"
      },
      {
        "drone_results": "{\"success\": true, \"theater_score\": 0, \"theatrical_patterns\": 1, \"todo_comments\": 1, \"placeholder_code\": 0, \"mock_implementations\": 0, \"execution_time_ms\": 2332}",
        "quality_gates": "{\"theater_score\": 0, \"threshold\": 30, \"patterns_detected\": 1}",
        "aggregated_result": "{\"phase\": \"theater_detection\", \"status\": \"clean\", \"summary\": \"Theater score: 0/100. Code is production-ready.\", \"quality_metrics\": {\"theater_score\": 0, \"threshold\": 30, \"patterns_detected\": 1}, \"next_phase\": \"deploy\", \"blockers\": [], \"recommendations\": [\"Code quality excellent\"]}"
      },
      {
        "drone_results": "{\"success\": true, \"theater_score\": 10, \"theatrical_patterns\": 0, \"todo_comments\": 0, \"placeholder_code\": 0, \"mock_implementations\": 0, \"execution_time_ms\": 2594}",
        "quality_gates": "{\"theater_score\": 10, \"threshold\": 30, \"patterns_detected\": 0}",
        "aggregated_result": "{\"phase\": \"theater_detection\", \"status\": \"clean\", \"summary\": \"Theater score: 10/100. Code is production-ready.\", \"quality_metrics\": {\"theater_score\": 10, \"threshold\": 30, \"patterns_detected\": 0}, \"next_phase\": \"deploy\", \"blockers\": [], \"recommendations\": [\"Replace TODOs and placeholders with real implementation\"]}"
      },
      {
        "drone_results": "{\"success\": true, \"theater_score\": 10, \"theatrical_patterns\": 0, \"todo_comments\": 0, \"placeholder_code\": 0, \"mock_implementations\": 0, \"execution_time_ms\": 3738}",
        "quality_gates": "{\"theater_score\": 10, \"threshold\": 30, \"patterns_detected\": 0}",
        "aggregated_result": "{\"phase\": \"theater_detection\", \"status\": \"clean\", \"summary\": \"Theater score: 10/100. Code is production-ready.\", \"quality_metrics\": {\"theater_score\": 10, \"threshold\": 30, \"patterns_detected\": 0}, \"next_phase\": \"deploy\", \"blockers\": [], \"recommendations\": [\"Replace TODOs and placeholders with real implementation\"]}"
      }
    ],
    "signature": {
      "instructions": "Aggregate drone results into coherent princess-level output.\n\nYou are a Princess agent receiving results from multiple drone agents\nthat executed tasks in parallel or sequence. Your role is to combine\ntheir individual results into a unified, comprehensive result that\ncan be reported to the Queen.\n\nAggregation must include:\n- Success/failure status of overall workflow\n- Quality metrics from all drones\n- Validation against quality gates\n- Artifacts produced by drones\n- Recommendations or next steps\n\nFollow the 26 prompt engineering principles:\n- Completeness: Include all relevant drone outputs\n- Quality: Validate against gates (test coverage, NASA compliance, etc.)\n- Clarity: Summarize complex results clearly\n- Structure: Output valid JSON format",
      "fields": [
        {
          "prefix": "Drone Results:",
          "description": "List of results from drone agents (each with success, data, metrics)"
        },
        {
          "prefix": "Quality Gates:",
          "description": "Quality gates to validate against (e.g., test_coverage >= 80%)"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "Aggregation reasoning explaining how results were combined and validated"
        },
        {
          "prefix": "Aggregated Result:",
          "description": "Aggregated result as JSON object. Must have: {'success': bool, 'overall_score': float, 'gates_passed': int, 'gates_failed': int, 'artifacts': list[str], 'recommendations': list[str]}"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.12",
      "dspy": "3.0.3",
      "cloudpickle": "3.0"
    }
  }
}
